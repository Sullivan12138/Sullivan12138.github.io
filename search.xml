<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安卓开发学习笔记（一）</title>
    <url>/2020/10/07/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="文件结构">文件结构</h2>
<p>app/src/main/java目录下存放所有的java代码和Kotlin代码。app/src/main/AndroidManifest.xml是整个Android项目的配置文件，程序中定义的四大组件（Activity、Service、BroadcastReceiver、ContentProvider）都要在这里注册了以后才能用。app/src/main/res目录下，以drawable开头的文件夹存放着图片，以mipmap开头的存放着图标，以values开头的存放着字符串、样式、颜色等配置，以layout开头的存放着布局文件。所有界面都是通过XML文件编写出来的。</p>
<a id="more"></a>
<h2 id="声明activity">声明Activity</h2>
<p>Activity是一种可以包含用户界面的组件，主要用于和用户进行交互。一个应用程序可以包含0个或多个Activity，但是不包含Activity的应用程序很少见。</p>
<p>项目中任何Activity都要重写onCreate()方法。每一个Activity最好都要对应一个布局文件。</p>
<p>Activity必须要在AndroidManifest.xml文件中注册，注册的方法为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.FirstActivity&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不过一般Android Studio会自动帮我们创建。上面的android:name用来指定注册哪一个Activity，而.FirstActivity是com.example.activitytest.FirstActivity的缩写写。因为AndroidManifest.xml文件已经在最外层的 &lt;manifest&gt; 中指定了包名，所以这里可以省略包名。</p>
<p>配置主Activity的方式是在&lt;activity&gt;标签内部加上&lt;intent-filter&gt;标签，并在其中加上<code>&lt;action android:name="android.intent.action.MAIN" /&gt;         &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</code>此外还可以用android:label属性指定Activity标题栏的内容，标题栏显示在Activity最顶部，而且会成为启动器（Launcher）中应用程序显示的名称。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android</span> <span class="attr">android:name</span>=<span class="string">&quot;.FirstActivity&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:label</span>=<span class="string">&quot;This is FirstActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果没有声明主Activity，这个应用程序就不能运行，但是可以作为库文件被其他应用程序调用。</p>
<h2 id="toast">Toast</h2>
<p>Toast是一种提醒方式，过一段时间后会消失，并且不会占用任何屏幕空间。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> button1: Button = findViewById(R.id.button1)</span><br><span class="line">button1.setOnClickListener &#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You clicked Button 1&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>findViewById()用于获取布局文件中定义的元素，这个id是在XML文件中的<code>&lt;android:id="@+id/button1"</code>定义的。findViewById返回的是一个继承自View的泛型对象，Kotlin无法自动推导出它是Button还是其他控件，因此需要强制类型转换。</p>
<p>Toast的用法很简单，通过静态方法makeText()方法创建一个Toast对象，然后调用show()方法将Toast显示出来。makeText()需要传入3个参数，第一个是context，也就是Toast要求的上下文，由于Activity本身就是一个Context对象，因此直接传入this即可。第二个是Toast显示的文本内容，第三个是显示的时长，有两个内置常量可以选择：Toast.LENGTH_SHORT和Toast.LENGTH_LONG</p>
<p>Kotlin编写的Android项目在app/build.gradle文件的头部默认引入了一个kotlin-android-extensions插件，这个插件会根据布局文件中定义的控件id自动生成一个具有相同名称的变量，我们可以在Activity中直接使用这些变量，就不再需要findViewById()方法了。当然还是建议使用Android Studio的自动补全功能，因为这些自动生成的变量也是需要导包的。</p>
<h2 id="menu">Menu</h2>
<p>menu通过Android Studio中Menu resource file文件创建，它的xml文件开头是<code>&lt;menu&gt;</code>标签，而AndroidManifest.xml开头是<code>&lt;manifest&gt;</code>标签，layout文件开头是<code>&lt;Layout&gt;</code>标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/add_item&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:title</span>=<span class="string">&quot;Add&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/remove_item&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:title</span>=<span class="string">&quot;Remove&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;item&gt;</code>标签用于创建一个菜单项，通过<code>&lt;android:id&gt;</code>给这个菜单项指定一个id，通过<code>&lt;android:title&gt;</code>给这个菜单项指定一个名称。</p>
<p>然后需要重写onCreateOptionsMenu()方法。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    menuInflater.inflate(R.menu.main, menu)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>menuInflater实际上是调用了父类的getMenuInflater()方法，返回一个menuInflater对象。它的inflate()方法接受两个参数，第一个参数用于指定我们通过哪个资源文件来创建菜单，第二个参数用于指定我们的菜单项添加到哪个Menu对象之中，这里我们直接使用onCreateOptionsMenu()方法中传入的menu参数。最后返回true表示将菜单显示出来。</p>
<p>通过重写onOptionsItemSelected()方法来定义当我们点击菜单时的响应事件。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOptionsItemSelected</span><span class="params">(item: <span class="type">MenuItem</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (item.itemId) &#123;</span><br><span class="line">        R.id.add_item -&gt; Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You clicked Add&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        R.id.remove_item -&gt; Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;You clicked Remove&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>item.itemId</code>判断点击的是哪个菜单项</p>
<h2 id="销毁activity">销毁Activity</h2>
<p>按下back键可以销毁，也可以在代码中调用finish()方法销毁。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">button1.setOnClickListener &#123;</span><br><span class="line">    finish()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Android开发</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-10-11杂谈</title>
    <url>/2020/10/11/2020-10-11%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<p>Python中三个有用的函数：</p>
<ul>
<li>max()，可以传入数组，直接返回数组的最大值，与之对应的还有min()</li>
<li>enumerate()，可以传入数组，返回(i, num)的序列，其中i为下标，num为数组对应下标处的元素，可以用于for循环</li>
<li>sum()，可以传入数组，直接返回数组元素之和</li>
</ul>
<p>另外，Python中//表示除法向下取整，类似C语言里的除法，Python里面的/是返回浮点数的。</p>
<p>定义一个一维全0数组可以这样写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">0</span>] * n</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>每日杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin入门</title>
    <url>/2020/10/11/Kotlin%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>编译型语言的特点是编译器会将我们的源代码一次性地编译成计算机可识别的二进制文件，而解释型语言的特点是解释器会一行行地读取我们的源代码然后实时地将他们解释称计算机可识别的二进制数据，所以解释型语言效率差一些。</p>
<p>虽然Java是先编译再运行的，但是Java编译之后生成的并不是计算机可识别的二进制文件，而是一种特殊的class文件，这种文件只有Java虚拟机才能识别，这个Java虚拟机实际上是一种解释器，它将class文件解释成计算机可识别的二进制文件，所以Java实际属于解释型语言。</p>
<p>那么，如果我们开发一门新的语言，将它编译成同样规格的class文件，Java虚拟机能不能识别呢？答案是肯定的。这就是Kotlin语言的工作原理。</p>
<a id="more"></a>
<p>在Android Studio中新建一个kotlin文件，命名为hello-world.kt，输入以下代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  println(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是我们第一个kotlin文件了，它会输出"Hello, world!"</p>
<h2 id="变量">变量</h2>
<p>在Java中如果想要定义一个变量，需要在变量前面声明这个变量的类型。而在Kotlin中只允许在变量前声明两种关键字：<strong>val</strong>和<strong>var</strong>。</p>
<p>val(value)用于声明一个不可变的变量，这种变量在初始赋值以后再也不能重新赋值。var(variable)用于声明一个可变的变量。变量本身的类型由Kotlin的类型推导机制确定。</p>
<p>Kotlin中完全抛弃了Java中的基本数据类型，全部使用了对象数据类型。</p>
<p><strong>永远优先使用val来声明，当val无法满足需求时再用var</strong>。</p>
<p>Kotlin中定义函数的方法如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">methodName</span><span class="params">(param1: <span class="type">Int</span>, param2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当一个函数中只有一行代码时，Kotlin允许我们不必编写函数体，直接将唯一的一行代码写在函数定义的尾部，中间用等号连接即可。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = max(num1, num2)</span><br></pre></td></tr></table></figure>
<p>并且由于类型推导极致，还可以再简化一下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">largerNumber</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>)</span></span> = max(num1, num2)</span><br></pre></td></tr></table></figure>
<h2 id="逻辑控制">逻辑控制</h2>
<h3 id="if语句">if语句</h3>
<p>kotlin中的if可以有返回值，返回值就是if语句每一个条件中最后一行代码的返回值</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin空指针</title>
    <url>/2020/10/04/Kotlin%E7%A9%BA%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>Kotlin中默认所有参数和变量都非空，例如：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    doStudy(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>)</span></span> &#123;</span><br><span class="line">    study.readBooks()</span><br><span class="line">    study.doHomework()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会报错，因为传入了空指针。</p>
<a id="more"></a>
<p>要想定义可以为空的参数或变量，需要在类型名后面加上?，上述代码改成下面这样就可以了</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doStudy</span><span class="params">(study: <span class="type">Study</span>?)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这时study的两个方法又会报错，因为这时可以传入空指针了，编译器会暗示我们进行空指针检查，我们可以用?.运算符，这个运算符表示如果为空就不执行返回Null，如果非空就执行。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">study?.readBooks()</span><br><span class="line">study?.doHomework()</span><br></pre></td></tr></table></figure>
<p>另外还有?:运算符，这个运算符表示如果左边的语句非空就返回左边的执行结果，否则返回右边的执行结果。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> c = a?:b</span><br><span class="line">表示</span><br><span class="line"><span class="keyword">val</span> c = <span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">    a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>!!是非空断言语句，表示我们告诉编译器它前面的对象就是非空的，不需要空指针检查。</p>
<p>let是Kotlin一个内置函数，它将调用它的变量传入后面的lambda表达式中。它可以用来和?.结合。</p>
<p>上述的代码</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">study?.readBooks()</span><br><span class="line">study?.doHomework()</span><br></pre></td></tr></table></figure>
<p>实际上执行了两次if else判断，用let可以简化</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">study?.let &#123; stu -&gt;</span><br><span class="line">           stu.readBooks()</span><br><span class="line">           stu.doHomework()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先判断study是否非空，如果非空就执行let函数，将study传入，执行后面的两个函数</p>
<p>此外let可以用于处理全局变量的判空问题，但是if不可以。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记（三）</title>
    <url>/2020/10/18/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>struct示例：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前面写字段名，接:。后面写类型，接,。注意最后一个字段后面也要加,。</p>
<p>如果要想让结构体中某一个字段变成可变的，必须让结构体整体可变。</p>
<a id="more"></a>
<p>如果字段名和参数完全一样，可以只写一个：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email: email,</span><br><span class="line">        username: username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    username: <span class="built_in">String</span>,</span><br><span class="line">    email: <span class="built_in">String</span>,</span><br><span class="line">    sign_in_count: <span class="built_in">u64</span>,</span><br><span class="line">    active: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以下这个和上面的等价</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">build_user</span></span>(email: <span class="built_in">String</span>, username: <span class="built_in">String</span>) -&gt; User &#123;</span><br><span class="line">    User &#123;</span><br><span class="line">        email,</span><br><span class="line">        username,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">        sign_in_count: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面展示了不使用更新语法时，如何在 <code>user2</code> 中创建一个新 <code>User</code> 实例。我们为 <code>email</code> 和 <code>username</code> 设置了新的值，其他值则使用了 <code>user1</code> 中的同名值：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user2 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">&quot;anotherusername567&quot;</span>),</span><br><span class="line">    active: user1.active,</span><br><span class="line">    sign_in_count: user1.sign_in_count,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用结构体更新语法，我们可以通过更少的代码来达到相同的效果，如下所示。<code>..</code> 语法指定了剩余未显式设置值的字段应有与给定实例对应字段相同的值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user2 = User &#123;</span><br><span class="line">    email: <span class="built_in">String</span>::from(<span class="string">&quot;another@example.com&quot;</span>),</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">&quot;anotherusername567&quot;</span>),</span><br><span class="line">    ..user1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也可以定义与元组（在第三章讨论过）类似的结构体，称为 <strong>元组结构体</strong>（<em>tuple structs</em>）。元组结构体有着结构体名称提供的含义，但没有具体的字段名，只有字段的类型。当你想给整个元组取一个名字，并使元组成为与其他元组不同的类型时，元组结构体是很有用的，这时像常规结构体那样为每个字段命名就显得多余和形式化了。</p>
<p>下面的Color和Point是元组结构体</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Color</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> black = Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> origin = Point(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意 <code>black</code> 和 <code>origin</code> 值的类型不同，因为它们是不同的元组结构体的实例。你定义的每一个结构体有其自己的类型，即使结构体中的字段有着相同的类型。例如，一个获取 <code>Color</code> 类型参数的函数不能接受 <code>Point</code> 作为参数，即便这两个类型都由三个 <code>i32</code> 值组成。在其他方面，元组结构体实例类似于元组：可以将其解构为单独的部分，也可以使用 <code>.</code> 后跟索引来访问单独的值，等等。</p>
<p>在<code>User</code> 结构体的定义中，我们使用了自身拥有所有权的 <code>String</code> 类型而不是 <code>&amp;str</code> 字符串 slice 类型。这是一个有意而为之的选择，因为我们想要这个结构体拥有它所有的数据，为此只要整个结构体是有效的话其数据也是有效的。</p>
<p>可以使结构体存储被其他对象拥有的数据的引用，不过这么做的话需要用上 <strong>生命周期</strong>（<em>lifetimes</em>）。生命周期确保结构体引用的数据有效性跟结构体本身保持一致。如果你尝试在结构体中存储一个引用而不指定生命周期将是无效的。</p>
<p>结构体的一个使用示例：</p>
<p>比如我们想要计算一个长方形的面积：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> width1 = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">let</span> height1 = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">        area(width1, height1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(width: <span class="built_in">u32</span>, height: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    width * height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然可以运行，但是无法体现长和宽的关系。函数 <code>area</code> 本应该计算一个长方形的面积，不过函数却有两个参数。这两个参数是相关联的，不过程序本身却没有表现出这一点。将长度和宽度组合在一起将更易懂也更易处理。</p>
<p>可以选择使用元组：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = (<span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">        area(rect1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(dimensions: (<span class="built_in">u32</span>, <span class="built_in">u32</span>)) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    dimensions.<span class="number">0</span> * dimensions.<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是元组并没有给出元素的名称，所以计算变得更费解了。在计算面积时将宽和高弄混倒无关紧要，不过当在屏幕上绘制长方形时就有问题了！我们必须牢记 <code>width</code> 的元组索引是 <code>0</code>，<code>height</code> 的元组索引是 <code>1</code>。如果其他人要使用这些代码，他们必须要搞清楚这一点，并也要牢记于心。很容易忘记或者混淆这些值而造成错误，因为我们没有在代码中传达数据的意图。</p>
<p>使用结构体会好很多：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">        <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">        area(&amp;rect1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(rectangle: &amp;Rectangle) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    rectangle.width * rectangle.height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>println!宏能处理很多类型的格式，不过，<code>&#123;&#125;</code> 默认告诉 <code>println!</code> 使用被称为 <code>Display</code> 的格式：意在提供给直接终端用户查看的输出。目前为止见过的基本类型都默认实现了 <code>Display</code>。不过结构体没有实现。</p>
<p>我们可以在 <code>&#123;&#125;</code> 中加入 <code>:?</code> 指示符告诉 <code>println!</code> 我们想要使用叫做 <code>Debug</code> 的输出格式。<code>Debug</code> 是一个 trait，它允许我们以一种对开发者有帮助的方式打印结构体，以便当我们调试代码时能看到它的值。</p>
<p>但是结构体也没有Debug这个trait。Rust <strong>确实</strong> 包含了打印出调试信息的功能，不过我们必须为结构体显式选择这个功能。为此，在结构体定义之前加上 <code>#[derive(Debug)]</code> 注解。</p>
<p>也可以用{:#?}输出，会比{:?}显示的格式更漂亮</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">rect1 is Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125; <span class="comment">// &#123;:?&#125;输出的</span></span><br><span class="line">rect1 is Rectangle &#123;</span><br><span class="line">    width: <span class="number">30</span>,</span><br><span class="line">    height: <span class="number">50</span></span><br><span class="line">&#125; <span class="comment">// &#123;:#?&#125;输出的</span></span><br></pre></td></tr></table></figure>
<p>通过仅仅使用 <code>self</code> 作为第一个参数来使方法获取实例的所有权是很少见的；这种技术通常用在当方法将 <code>self</code> 转换成别的实例的时候，这时我们想要防止调用者在转换之后使用原始的实例。</p>
<p>Rust 有一个叫 <strong>自动引用和解引用</strong>（<em>automatic referencing and dereferencing</em>）的功能。方法调用是 Rust 中少数几个拥有这种行为的地方。</p>
<p>他是这样工作的：当使用 <code>object.something()</code> 调用方法时，Rust 会自动为 <code>object</code> 添加 <code>&amp;</code>、<code>&amp;mut</code> 或 <code>*</code> 以便使 <code>object</code> 与方法签名匹配。也就是说，这些代码是等价的：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">p1.distance(&amp;p2);</span><br><span class="line">(&amp;p1).distance(&amp;p2);</span><br></pre></td></tr></table></figure>
<p>这也是为什么方法定义中声明参数是&amp;self，但是我们仍然能用struct而不是&amp;struct调用的原因。</p>
<p><code>impl</code> 块的另一个有用的功能是：允许在 <code>impl</code> 块中定义 <strong>不</strong> 以 <code>self</code> 作为参数的函数。这被称为 <strong>关联函数</strong>（<em>associated functions</em>），因为它们与结构体相关联。它们仍是函数而不是方法，因为它们并不作用于一个结构体的实例。在Java中这叫静态方法。</p>
<p>每个结构体都允许拥有多个 <code>impl</code> 块。</p>
<p>像这样定义枚举：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">    V4,</span><br><span class="line">    V6,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像这样使用其中成员：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> four = IpAddrKind::V4;</span><br><span class="line"><span class="keyword">let</span> six = IpAddrKind::V6;</span><br></pre></td></tr></table></figure>
<p>还可以把数据直接放入枚举成员中：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">String</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> home = IpAddr::V4(<span class="built_in">String</span>::from(<span class="string">&quot;127.0.0.1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loopback = IpAddr::V6(<span class="built_in">String</span>::from(<span class="string">&quot;::1&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>枚举的好处是能让那些不同类型的成员都有同样的类型：枚举类型，这样就可以用一个函数处理他们。</p>
<p>枚举里面也可以定义方法。</p>
<p>Option&lt;T&gt;是一个重要的枚举</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125; <span class="comment">// Some也是一个枚举</span></span><br><span class="line"><span class="keyword">let</span> some_number = <span class="literal">Some</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> some_string = <span class="literal">Some</span>(<span class="string">&quot;a string&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> absent_number: <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; = <span class="literal">None</span>; <span class="comment">// 如果为None，需要显示指定Option的T类型</span></span><br></pre></td></tr></table></figure>
<p>match匹配：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>match必须匹配完所有的模式，如果后面的不想管可以用_表示。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> some_u8_value = <span class="number">0u8</span>;</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;five&quot;</span>),</span><br><span class="line">    <span class="number">7</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;seven&quot;</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_</code> 模式会匹配所有的值。通过将其放置于其他分支之后，<code>_</code> 将会匹配所有之前没有指定的可能的值。</p>
<p>如果只想要匹配一个的情况，可以用if let</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> some_u8_value = <span class="literal">Some</span>(<span class="number">0u8</span>);</span><br><span class="line"><span class="keyword">match</span> some_u8_value &#123;</span><br><span class="line">    <span class="literal">Some</span>(<span class="number">3</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以写成</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(<span class="number">3</span>) = some_u8_value &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if let也可加else</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记（一）</title>
    <url>/2020/10/17/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>mut用来声明可变数据，数据默认不可变，用let来声明。可以在声明一个数据以后再次声明一个同名的，这时前面的会被覆盖</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> b = <span class="number">1</span></span><br><span class="line">a = <span class="number">2</span> <span class="comment">// 这句话会报错</span></span><br><span class="line">b = <span class="number">2</span> <span class="comment">// 这句话可以</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;Hello&quot;</span> <span class="comment">// a变成了字符串&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>&amp;表示不可变引用，&amp;mut 表示可变引用，对可变数据可以使用&amp;和&amp;mut，对不可变数据只能用&amp;</p>
<p>声明函数：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(param1: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, param1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数参数必须声明类型。表达式是不带分号的语句，表达式返回值但是语句不返回值，所以函数最后一句可以用一个不带分号的语句写，从而省略return语句</p>
<p>我们并不对返回值命名，但要在箭头（<code>-&gt;</code>）后声明它的类型。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = (<span class="keyword">let</span> y = <span class="number">5</span>); <span class="comment">//错误，因为let y = 5不返回值</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>有符号整型：i8、i16、i32、i64、i128、isize（在64位机器上是64位，在32位机器上是32位）</p></li>
<li><p>无符号整型：u8、u16、u32、u64、u128、size</p></li>
<li><p>浮点型：f32、f64</p></li>
<li><p>布尔型：bool</p></li>
</ul>
<p>比较长的可以用_分隔开，例如5_000_000</p>
<p>整型最大最小值：std::i32::MAX、std::i32::MIN，把32换成其他数字就是其他位数下的最大最小值</p>
<p>println!()为输出函数，{}类似于C语言里面的%d，但是它可以匹配任何内容，所以输出很方便</p>
<p>rust中注释是//</p>
<p>if表达式后面不用加()</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if是表达式，它返回一个值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is: &#123;&#125;&quot;</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>rust有三种循环：</p>
<ul>
<li><p>loop</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>loop会不停地执行，使用break退出，并且break后面可以指定返回值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>while</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line"></span><br><span class="line">        number = number - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while后面的条件也不加()</p></li>
<li><p>for</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for后面可以跟range和iter这样的方法</p></li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记（五）</title>
    <url>/2020/10/18/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h2 id="vector">vector</h2>
<p>可以用Vec::new()创建一个新的空vector</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">Vec</span>::new();</span><br><span class="line"><span class="comment">// 也可以不加i32这个类型注解，Rust会根据插入的第一个数据自动推断vector中元素的类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">Vec</span>::new();</span><br><span class="line"></span><br><span class="line">v.push(<span class="number">5</span>);</span><br><span class="line">v.push(<span class="number">6</span>);</span><br><span class="line">v.push(<span class="number">7</span>);</span><br><span class="line">v.push(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 或者也可以用vec!宏来定义</span></span><br><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>对于数组和元组，当且仅当其中所有元素是copy的时候，它是copy的，对于vector，它就是不可copy的。但是对于数组、元组、vector中单个的元素，如果这些元素本身是可以copy的类型，这些元素都是可以copy的。</p>
<p>可以用get方法获取Option&lt;&amp;T&gt;来获取vector中的元素：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> third: &amp;<span class="built_in">i32</span> = &amp;v[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;The third element is &#123;&#125;&quot;</span>, third);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> v.get(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="literal">Some</span>(third) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;The third element is &#123;&#125;&quot;</span>, third),</span><br><span class="line">    <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;There is no third element.&quot;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>vector 只能储存相同类型的值。这是很不方便的；绝对会有需要储存一系列不同类型的值的用例。幸运的是，枚举的成员都被定义为相同的枚举类型，所以当需要在 vector 中储存不同类型值时，我们可以定义并使用一个枚举！</p>
<p>例如，假如我们想要从电子表格的一行中获取值，而这一行的有些列包含数字，有些包含浮点值，还有些是字符串。我们可以定义一个枚举，其成员会存放这些不同类型的值，同时所有这些枚举成员都会被当作相同类型，那个枚举的类型。接着可以创建一个储存枚举值的 vector，这样最终就能够储存不同类型的值了。代码如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SpreadsheetCell</span></span> &#123;</span><br><span class="line">    Int(<span class="built_in">i32</span>),</span><br><span class="line">    Float(<span class="built_in">f64</span>),</span><br><span class="line">    Text(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> row = <span class="built_in">vec!</span>[</span><br><span class="line">    SpreadsheetCell::Int(<span class="number">3</span>),</span><br><span class="line">    SpreadsheetCell::Text(<span class="built_in">String</span>::from(<span class="string">&quot;blue&quot;</span>)),</span><br><span class="line">    SpreadsheetCell::Float(<span class="number">10.12</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h2 id="string">String</h2>
<p>像vector一样使用new来新建</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br></pre></td></tr></table></figure>
<p>通常字符串会有初始数据，因为我们希望一开始就有这个字符串。为此，可以使用 <code>to_string</code> 方法，它能用于任何实现了 <code>Display</code> trait 的类型，字符串字面值也实现了它。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="string">&quot;initial contents&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = data.to_string();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法也可直接用于字符串字面值：</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;initial contents&quot;</span>.to_string();</span><br></pre></td></tr></table></figure>
<p>也可以使用 <code>String::from</code> 函数来从字符串字面值创建 <code>String</code>。</p>
<p>由于String是采用UTF-8编码的，所以可以用任何语言的字面值去初始化它。</p>
<p>可以使用push_str()在String后面添加&amp;str把它变长，也可以使用push()添加字符</p>
<p>可以使用+拼接，使用format!宏</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;Hello, &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">&quot;world!&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = s1 + &amp;s2; <span class="comment">// 注意 s1 被移动了，不能继续使用</span></span><br></pre></td></tr></table></figure>
<p>这里+实际调用的是add函数，add函数原型如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(<span class="keyword">self</span>, s: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">String</span> &#123;</span><br></pre></td></tr></table></figure>
<p>首先，<code>s2</code> 使用了 <code>&amp;</code>，意味着我们使用第二个字符串的 <strong>引用</strong> 与第一个字符串相加。这是因为 <code>add</code> 函数的 <code>s</code> 参数：只能将 <code>&amp;str</code> 和 <code>String</code> 相加，不能将两个 <code>String</code> 值相加。不过等一下 —— 正如 <code>add</code> 的第二个参数所指定的，<code>&amp;s2</code> 的类型是 <code>&amp;String</code> 而不是 <code>&amp;str</code>。为什么这段代码还能编译呢？</p>
<p>之所以能够在 <code>add</code> 调用中使用 <code>&amp;s2</code> 是因为 <code>&amp;String</code> 可以被 <strong>强转</strong>（<em>coerced</em>）成 <code>&amp;str</code>。当<code>add</code>函数被调用时，Rust 使用了一个被称为 <strong>解引用强制多态</strong>（<em>deref coercion</em>）的技术，你可以将其理解为它把 <code>&amp;s2</code> 变成了 <code>&amp;s2[..]</code>。</p>
<p>其次，可以发现签名中 <code>add</code> 获取了 <code>self</code> 的所有权，因为 <code>self</code> <strong>没有</strong> 使用 <code>&amp;</code>。这意味着示例 8-18 中的 <code>s1</code> 的所有权将被移动到 <code>add</code> 调用中，之后就不再有效。所以虽然 <code>let s3 = s1 + &amp;s2;</code> 看起来就像它会复制两个字符串并创建一个新的字符串，而实际上这个语句会获取 <code>s1</code> 的所有权，附加上从 <code>s2</code> 中拷贝的内容，并返回结果的所有权。换句话说，它看起来好像生成了很多拷贝，不过实际上并没有：这个实现比拷贝要更高效。</p>
<p>format!宏使用示范：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;tic&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">&quot;tac&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="built_in">String</span>::from(<span class="string">&quot;toe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>, s1, s2, s3);</span><br></pre></td></tr></table></figure>
<p>字符串不支持用[]直接索引</p>
<p>可以使用&amp;str来获取索引，但是不建议这么做：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hello = <span class="string">&quot;Здравствуйте&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = &amp;hello[<span class="number">0</span>..<span class="number">4</span>]; <span class="comment">// 这样可以</span></span><br><span class="line"><span class="keyword">let</span> s = &amp;hello[<span class="number">0</span>..<span class="number">1</span>]; <span class="comment">// 这会panic</span></span><br></pre></td></tr></table></figure>
<p>可以使用chars()返回每个字符，也可以使用bytes()获取每个字节值</p>
<h2 id="hash-map">hash map</h2>
<p>可以使用 <code>new</code> 创建一个空的 <code>HashMap</code>，并使用 <code>insert</code> 增加元素。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> scores = HashMap::new();</span><br><span class="line"></span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);</span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Yellow&quot;</span>), <span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<p>注意必须首先 <code>use</code> 标准库中集合部分的 <code>HashMap</code>。在这三个常用集合中，<code>HashMap</code> 是最不常用的，所以并没有被 prelude 自动引用。标准库中对 <code>HashMap</code> 的支持也相对较少，例如，并没有内建的构建宏。</p>
<p>另一个构建哈希 map 的方法是使用一个元组的 vector 的 <code>collect</code> 方法，其中每个元组包含一个键值对。<code>collect</code> 方法可以将数据收集进一系列的集合类型，包括 <code>HashMap</code>。例如，如果队伍的名字和初始分数分别在两个 vector 中，可以使用 <code>zip</code> 方法来创建一个元组的 vector，其中 “Blue” 与 10 是一对，依此类推。接着就可以使用 <code>collect</code> 方法将这个元组 vector 转换成一个 <code>HashMap</code>，示例如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> teams  = <span class="built_in">vec!</span>[<span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>), <span class="built_in">String</span>::from(<span class="string">&quot;Yellow&quot;</span>)];</span><br><span class="line"><span class="keyword">let</span> initial_scores = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> scores: HashMap&lt;_, _&gt; = teams.iter().zip(initial_scores.iter()).collect();</span><br></pre></td></tr></table></figure>
<p>这里 <code>HashMap&lt;_, _&gt;</code> 类型注解是必要的，因为可能 <code>collect</code> 很多不同的数据结构，而除非显式指定否则 Rust 无从得知你需要的类型。但是对于键和值的类型参数来说，可以使用下划线占位，而 Rust 能够根据 vector 中数据的类型推断出 <code>HashMap</code> 所包含的类型。</p>
<p>对于像 <code>i32</code> 这样的实现了 <code>Copy</code> trait 的类型，其值可以拷贝进哈希 map。对于像 <code>String</code> 这样拥有所有权的值，其值将被移动而哈希 map 会成为这些值的所有者。如果将值的引用插入哈希 map，这些值本身将不会被移动进哈希 map。但是这些引用指向的值必须至少在哈希 map 有效时也是有效的。</p>
<p>可以通过 <code>get</code> 方法并提供对应的键来从哈希 map 中获取值</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> scores = HashMap::new();</span><br><span class="line"></span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);</span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Yellow&quot;</span>), <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> team_name = <span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> score = scores.get(&amp;team_name);</span><br></pre></td></tr></table></figure>
<p>可以使用与 vector 类似的方式来遍历哈希 map 中的每一个键值对，也就是 <code>for</code> 循环：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> scores = HashMap::new();</span><br><span class="line"></span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);</span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Yellow&quot;</span>), <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> &amp;scores &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们插入了一个键值对，接着用相同的键插入一个不同的值，与这个键相关联的旧值将被替换</p>
<p>我们经常会检查某个特定的键是否有值，如果没有就插入一个值。为此哈希 map 有一个特有的 API，叫做 <code>entry</code>，它获取我们想要检查的键作为参数。<code>entry</code> 函数的返回值是一个枚举，<code>Entry</code>，它代表了可能存在也可能不存在的值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> scores = HashMap::new();</span><br><span class="line">scores.insert(<span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>), <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">scores.entry(<span class="built_in">String</span>::from(<span class="string">&quot;Yellow&quot;</span>)).or_insert(<span class="number">50</span>);</span><br><span class="line">scores.entry(<span class="built_in">String</span>::from(<span class="string">&quot;Blue&quot;</span>)).or_insert(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, scores);</span><br></pre></td></tr></table></figure>
<p><code>Entry</code> 的 <code>or_insert</code> 方法在键对应的值存在时就返回这个值的可变引用，如果不存在则将参数作为新值插入并返回新值的可变引用。</p>
<p>另一个常见的哈希 map 的应用场景是找到一个键对应的值并根据旧的值更新它。例如，以下的代码计数一些文本中每一个单词分别出现了多少次。我们使用哈希 map 以单词作为键并递增其值来记录我们遇到过几次这个单词。如果是第一次看到某个单词，就插入值 <code>0</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;hello world wonderful world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> map = HashMap::new();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> text.split_whitespace() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = map.entry(word).or_insert(<span class="number">0</span>);</span><br><span class="line">    *count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, map);</span><br></pre></td></tr></table></figure>
<p>这会打印出 <code>&#123;"world": 2, "hello": 1, "wonderful": 1&#125;</code>，<code>or_insert</code> 方法事实上会返回这个键的值的一个可变引用（<code>&amp;mut V</code>）。这里我们将这个可变引用储存在 <code>count</code> 变量中，所以为了赋值必须首先使用星号（<code>*</code>）解引用 <code>count</code>。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记（二）</title>
    <url>/2020/10/17/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>访问堆必须要用指针访问，而且比访问栈慢的多</p>
<p>首先，让我们看一下所有权的规则。当我们通过举例说明时，请谨记这些规则：</p>
<blockquote>
<ol type="1">
<li><p>Rust 中的每一个值都有一个被称为其 <strong>所有者</strong>（<em>owner</em>）的变量。</p></li>
<li><p>值在任一时刻有且只有一个所有者。</p></li>
<li><p>当所有者（变量）离开作用域，这个值将被丢弃。</p></li>
</ol>
</blockquote>
<ul>
<li>当 <code>s</code> <strong>进入作用域</strong> 时，它就是有效的。</li>
<li>这一直持续到它 <strong>离开作用域</strong> 为止。</li>
</ul>
<a id="more"></a>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">&#123;                      <span class="comment">// s 在这里无效, 它尚未声明</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// 从此处起，s 是有效的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 s</span></span><br><span class="line">&#125;                      <span class="comment">// 此作用域已结束，s 不再有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串字面值是很方便的，不过它们并不适合使用文本的每一种场景。原因之一就是它们是不可变的。另一个原因是并非所有字符串的值都能在编写代码时就知道：例如，要是想获取用户输入并存储该怎么办呢？为此，Rust 有第二个字符串类型，String。这个类型被分配到堆上，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String，如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 <code>String</code> 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>
<ul>
<li>必须在运行时向操作系统请求内存。</li>
<li>需要一个当我们处理完 <code>String</code> 时将内存返回给操作系统的方法。</li>
</ul>
<p>第一部分由我们完成：当调用 <code>String::from</code> 时，它的实现 (<em>implementation</em>) 请求其所需的内存。这在编程语言中是非常通用的。</p>
<p>然而，第二部分实现起来就各有区别了。在有 <strong>垃圾回收</strong>（<em>garbage collector</em>，<em>GC</em>）的语言中， GC 记录并清除不再使用的内存，而我们并不需要关心它。没有 GC 的话，识别出不再使用的内存并调用代码显式释放就是我们的责任了，跟请求内存的时候一样。从历史的角度上说正确处理内存回收曾经是一个困难的编程问题。如果忘记回收了会浪费内存。如果过早回收了，将会出现无效变量。如果重复回收，这也是个 bug。我们需要精确的为一个 <code>allocate</code> 配对一个 <code>free</code>。</p>
<p>Rust 采取了一个不同的策略：内存在拥有它的变量离开作用域后就被自动释放。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>); <span class="comment">// 从此处起，s 是有效的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 s</span></span><br><span class="line">&#125;                                  <span class="comment">// 此作用域已结束，</span></span><br><span class="line">                                   <span class="comment">// s 不再有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个将 <code>String</code> 需要的内存返回给操作系统的很自然的位置：当 <code>s</code> 离开作用域的时候。当变量离开作用域，Rust 为我们调用一个特殊的函数。这个函数叫做 <code>drop</code>，在这里 <code>String</code> 的作者可以放置释放内存的代码。Rust 在结尾的 <code>&#125;</code> 处自动调用 <code>drop</code>。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个5被压入了栈中</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>String</code> 由三部分组成，如图左侧所示：一个指向存放字符串内容内存的指针，一个长度，和一个容量。这一组数据存储在栈上。右侧则是堆上存放内容的内存部分。</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjspzvwrzjj30ni0ew3z9.jpg" /></p>
<p>长度表示 <code>String</code> 的内容当前使用了多少字节的内存。容量是 <code>String</code> 从操作系统总共获取了多少字节的内存。</p>
<p>当我们将 <code>s1</code> 赋值给 <code>s2</code>，<code>String</code> 的数据被复制了，这意味着我们从栈上拷贝了它的指针、长度和容量。我们并没有复制指针指向的堆上数据。换句话说，内存中数据的表现如图 4-2 所示。</p>
<p><img data-src="/Users/taowei/Library/Application%20Support/typora-user-images/image-20201017225510210.png" /></p>
<p>因为如果连数据也拷贝就会占用很多内存。</p>
<p>之前我们提到过当变量离开作用域后，Rust 自动调用 <code>drop</code> 函数并清理变量的堆内存。不过图 4-2 展示了两个数据指针指向了同一位置。这就有了一个问题：当 <code>s2</code> 和 <code>s1</code> 离开作用域，他们都会尝试释放相同的内存。这是一个叫做 <strong>二次释放</strong>（<em>double free</em>）的错误，也是之前提到过的内存安全性 bug 之一。两次释放（相同）内存会导致内存污染，它可能会导致潜在的安全漏洞。</p>
<p>为了确保内存安全，这种场景下 Rust 的处理有另一个细节值得注意。与其尝试拷贝被分配的内存，Rust 则认为 <code>s1</code> 不再有效，因此 Rust 不需要在 <code>s1</code> 离开作用域后清理任何东西。看看在 <code>s2</code> 被创建之后尝试使用 <code>s1</code> 会发生什么；这段代码不能运行：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;, world!&quot;</span>, s1);</span><br></pre></td></tr></table></figure>
<p>如果s1和s2是栈上的数据类型（例如整型）那就可以。</p>
<p>如果你在其他语言中听说过术语 <strong>浅拷贝</strong>（<em>shallow copy</em>）和 <strong>深拷贝</strong>（<em>deep copy</em>），那么拷贝指针、长度和容量而不拷贝数据可能听起来像浅拷贝。不过因为 Rust 同时使第一个变量无效了，这个操作被称为 <strong>移动</strong>（<em>move</em>），而不是浅拷贝。上面的例子可以解读为 <code>s1</code> 被 <strong>移动</strong> 到了 <code>s2</code> 中。</p>
<p>Rust 永远也不会自动创建数据的 “深拷贝”。深拷贝很消耗资源，因此，Rust中任何 <strong>自动</strong> 的复制可以被认为对运行时性能影响较小。</p>
<p>如果我们 <strong>确实</strong> 需要深度复制 <code>String</code> 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 <code>clone</code> 的通用函数。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.clone();</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码能正常运行，并且明确产生图 4-3 中行为，这里堆上的数据 <strong>确实</strong> 被复制了。</p>
<p>当出现 <code>clone</code> 调用时，你知道一些特定的代码被执行而且这些代码可能相当消耗资源。你很容易察觉到一些不寻常的事情正在发生。</p>
<p>对于整型这种在编译时已知大小的类型被整个存储在栈上，没有深浅拷贝的区别。</p>
<p>Rust 有一个叫做 <code>Copy</code> trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上。如果一个类型拥有 <code>Copy</code> trait，一个旧的变量在将其赋值给其他变量后仍然可用。Rust 不允许自身或其任何部分实现了 <code>Drop</code> trait 的类型使用 <code>Copy</code> trait。如果我们对其值离开作用域时需要特殊处理的类型使用 <code>Copy</code> 注解，将会出现一个编译时错误。</p>
<p>元组，当且仅当其包含的类型也都是 <code>Copy</code> 的时候，也是Copy的。</p>
<p>将值传递给函数在语义上与给变量赋值相似。向函数传递值可能会移动或者复制，就像赋值语句一样。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s 进入作用域</span></span><br><span class="line"></span><br><span class="line">    takes_ownership(s);             <span class="comment">// s 的值移动到函数里 ...</span></span><br><span class="line">                                    <span class="comment">// ... 所以到这里不再有效</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;                      <span class="comment">// x 进入作用域</span></span><br><span class="line"></span><br><span class="line">    makes_copy(x);                  <span class="comment">// x 应该移动函数里，</span></span><br><span class="line">                                    <span class="comment">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span></span><br><span class="line">  <span class="comment">// 所以不会有特殊操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>) &#123; <span class="comment">// some_string 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">makes_copy</span></span>(some_integer: <span class="built_in">i32</span>) &#123; <span class="comment">// some_integer 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_integer);</span><br><span class="line">&#125; <span class="comment">// 这里，some_integer 移出作用域。不会有特殊操作</span></span><br></pre></td></tr></table></figure>
<p>rust的函数实参和形参必须严格一致，如果声明是&amp; int，必须传入&amp; int，不能传入int。如果传入&amp; int，必须声明&amp; int，不能声明int。如果声明&amp;mut，必须也传入&amp;mut。&amp; 和后面的类型可以分开也可以合起来写。但是如果是&amp; self的话，可以传入self的类型值，不用加&amp;。</p>
<p>把参数传入函数可以理解为将实参赋值给形参的过程。</p>
<p>一个引用的作用域从声明的地方开始一直持续到最后一次使用为止。也可以用一对大括号显示地定义作用域。</p>
<p>在特定作用域中的特定数据只能有一个可变引用。</p>
<p>我们 <strong>也</strong> 不能在拥有不可变引用的同时拥有可变引用。</p>
<p>在具有指针的语言中，很容易通过释放内存时保留指向它的指针而错误地生成一个 <strong>悬垂指针</strong>（<em>dangling pointer</em>），所谓悬垂指针是其指向的内存可能已经被分配给其它持有者。相比之下，在 Rust 中编译器确保引用永远也不会变成悬垂状态：当你拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> reference_to_nothing = dangle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &amp;s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>s</code> 是在 <code>dangle</code> 函数内创建的，当 <code>dangle</code> 的代码执行完毕后，<code>s</code> 将被释放。不过我们尝试返回它的引用。这意味着这个引用会指向一个无效的 <code>String</code></p>
<p>这里的解决方法是直接返回 <code>String</code>：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![allow(unused)]</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">no_dangle</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    s</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>字符串 slice</strong>（<em>string slice</em>）是 <code>String</code> 中一部分值的引用,“字符串 slice” 的类型声明写作 <code>&amp;str</code>。字符串字面值就是&amp;str。可以直接把参数里面的&amp;String写成&amp;str。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记（六）</title>
    <url>/2020/10/18/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<p>使用match匹配的方式匹配Result&lt;T, E&gt;，除此之外还有很多辅助方法。</p>
<p>unwrap:如果 <code>Result</code> 值是成员 <code>Ok</code>，<code>unwrap</code> 会返回 <code>Ok</code> 中的值。如果 <code>Result</code> 是成员 <code>Err</code>，<code>unwrap</code> 会为我们调用 <code>panic!</code>。</p>
<p>expect:<code>expect</code> 与 <code>unwrap</code> 的使用方式一样：返回文件句柄或调用 <code>panic!</code> 宏。<code>expect</code> 用来调用 <code>panic!</code> 的错误信息将会作为参数传递给 <code>expect</code> ，而不像<code>unwrap</code> 那样使用默认的 <code>panic!</code> 信息。</p>
<p>当编写一个其实现会调用一些可能会失败的操作的函数时，除了在这个函数中处理错误外，还可以选择让调用者知道这个错误并决定该如何处理。这被称为 <strong>传播</strong>（<em>propagating</em>）错误，这样能更好的控制代码调用，因为比起你代码所拥有的上下文，调用者可能拥有更多信息或逻辑来决定应该如何处理错误。</p>
<p>Rust中有?运算符专门实现了这个传播错误的操作</p>
<a id="more"></a>
<p>Result后面的?表示如果 <code>Result</code> 的值是 <code>Ok</code>，这个表达式将会返回 <code>Ok</code> 中的值而程序将继续执行。如果值是 <code>Err</code>，<code>Err</code> 中的值将作为整个函数的返回值，就好像使用了 <code>return</code> 关键字一样，这样错误值就被传播给了调用者。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">read_username_from_file</span></span>() -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> f = File::open(<span class="string">&quot;hello.txt&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    f.read_to_string(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="literal">Ok</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>?</code> 运算符所使用的错误值被传递给了 <code>from</code> 函数，它定义于标准库的 <code>From</code> trait 中，其用来将错误从一种类型转换为另一种类型。当 <code>?</code> 运算符调用 <code>from</code> 函数时，收到的错误类型被转换为由当前函数返回类型所指定的错误类型。这在当函数返回单个错误类型来代表所有可能失败的方式时很有用，即使其可能会因很多种原因失败。只要每一个错误类型都实现了 <code>from</code> 函数来定义如何将自身转换为返回的错误类型，<code>?</code> 运算符会自动处理这些转换。</p>
<p><code>?</code> 运算符消除了大量样板代码并使得函数的实现更简单。我们甚至可以在 <code>?</code> 之后直接使用链式方法调用来进一步缩短代码，如下所示：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">read_username_from_file</span></span>() -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">String</span>, io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    File::open(<span class="string">&quot;hello.txt&quot;</span>)?.read_to_string(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main函数是特殊的，其必须返回什么类型是有限制的。<code>main</code> 函数的一个有效的返回值是 <code>()</code>，同时出于方便，另一个有效的返回值是 <code>Result&lt;T, E&gt;</code>，如下所示：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; <span class="built_in">Result</span>&lt;(), <span class="built_in">Box</span>&lt;<span class="keyword">dyn</span> Error&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> f = File::open(<span class="string">&quot;hello.txt&quot;</span>)?;</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Box&lt;dyn Error&gt;被称为 “trait 对象”（“trait object”），目前可以理解 <code>Box&lt;dyn Error&gt;</code> 为使用 <code>?</code> 时 <code>main</code> 允许返回的 “任何类型的错误”。</p>
<p>trait的使用：</p>
<p>定义trait:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在方法签名后跟分号，而不是在大括号</p>
<p>为类型实现trait:</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">NewsArticle</span></span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> headline: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> location: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> author: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> NewsArticle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;, by &#123;&#125; (&#123;&#125;)&quot;</span>, <span class="keyword">self</span>.headline, <span class="keyword">self</span>.author, <span class="keyword">self</span>.location)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tweet</span></span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> username: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> content: <span class="built_in">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> reply: <span class="built_in">bool</span>,</span><br><span class="line">    <span class="keyword">pub</span> retweet: <span class="built_in">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Summary <span class="keyword">for</span> Tweet &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, <span class="keyword">self</span>.username, <span class="keyword">self</span>.content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦实现了 trait，我们就可以用与 <code>NewsArticle</code> 和 <code>Tweet</code> 实例的非 trait 方法一样的方式调用 trait 方法了：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tweet = Tweet &#123;</span><br><span class="line">    username: <span class="built_in">String</span>::from(<span class="string">&quot;horse_ebooks&quot;</span>),</span><br><span class="line">    content: <span class="built_in">String</span>::from(<span class="string">&quot;of course, as you probably already know, people&quot;</span>),</span><br><span class="line">    reply: <span class="literal">false</span>,</span><br><span class="line">    retweet: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;1 new tweet: &#123;&#125;&quot;</span>, tweet.summarize());</span><br></pre></td></tr></table></figure>
<p>实现 trait 时需要注意的一个限制是，只有当 trait 或者要实现 trait 的类型位于 crate 的本地作用域时，才能为该类型实现 trait。例如，可以为 <code>aggregator</code> crate 的自定义类型 <code>Tweet</code> 实现如标准库中的 <code>Display</code> trait，这是因为 <code>Tweet</code> 类型位于 <code>aggregator</code> crate 本地的作用域中。类似地，也可以在 <code>aggregator</code> crate 中为 <code>Vec&lt;T&gt;</code> 实现 <code>Summary</code>，这是因为 <code>Summary</code> trait 位于 <code>aggregator</code> crate 本地作用域中。</p>
<p>但是不能为外部类型实现外部 trait。例如，不能在 <code>aggregator</code> crate 中为 <code>Vec&lt;T&gt;</code> 实现 <code>Display</code> trait。这是因为 <code>Display</code> 和 <code>Vec&lt;T&gt;</code> 都定义于标准库中，它们并不位于 <code>aggregator</code> crate 本地作用域中。这个限制是被称为 <strong>相干性</strong>（<em>coherence</em>） 的程序属性的一部分，或者更具体的说是 <strong>孤儿规则</strong>（<em>orphan rule</em>）。</p>
<p>可以为 trait 中的某些或全部方法提供默认的行为，</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="built_in">String</span>::from(<span class="string">&quot;(Read more...)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想要对 <code>NewsArticle</code> 实例使用这个默认实现，而不是定义一个自己的实现，则可以通过 <code>impl Summary for NewsArticle &#123;&#125;</code> 指定一个空的 <code>impl</code> 块。</p>
<p>默认实现允许调用相同 trait 中的其他方法，哪怕这些方法没有默认实现</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">trait</span> <span class="title">Summary</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize_author</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">summarize</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="built_in">format!</span>(<span class="string">&quot;(Read more from &#123;&#125;...)&quot;</span>, <span class="keyword">self</span>.summarize_author())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如上面为 <code>NewsArticle</code> 和 <code>Tweet</code> 类型实现了 <code>Summary</code> trait。我们可以定义一个函数 <code>notify</code> 来调用其参数 <code>item</code> 上的 <code>summarize</code> 方法，该参数是实现了 <code>Summary</code> trait 的某种类型。为此可以使用 <code>impl Trait</code> 语法，像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pub fn notify(item: impl Summary) &#123;</span><br><span class="line">    println!(&quot;Breaking news! &#123;&#125;&quot;, item.summarize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>impl Trait</code> 语法适用于直观的例子，它不过是一个较长形式的语法糖。这被称为 <em>trait bound</em>，这看起来像：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>&lt;T: Summary&gt;(item: T) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.summarize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>notify</code> 需要显示 <code>item</code> 的格式化形式，同时也要使用 <code>summarize</code> 方法，那么 <code>item</code> 就需要同时实现两个不同的 trait：<code>Display</code> 和 <code>Summary</code>。这可以通过 <code>+</code> 语法实现：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>(item: <span class="keyword">impl</span> Summary + Display) &#123;</span><br></pre></td></tr></table></figure>
<p><code>+</code> 语法也适用于泛型的 trait bound：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">notify</span></span>&lt;T: Summary + Display&gt;(item: T) &#123;</span><br></pre></td></tr></table></figure>
<p>然而，使用过多的 trait bound 也有缺点。每个泛型有其自己的 trait bound，所以有多个泛型参数的函数在名称和参数列表之间会有很长的 trait bound 信息，这使得函数签名难以阅读。为此，Rust 有另一个在函数签名之后的 <code>where</code> 从句中指定 trait bound 的语法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">some_function</span></span>&lt;T: Display + <span class="built_in">Clone</span>, U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span>&gt;(t: T, u: U) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line"> <span class="comment">//等价于</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">some_function</span></span>&lt;T, U&gt;(t: T, u: U) -&gt; <span class="built_in">i32</span></span><br><span class="line">    <span class="keyword">where</span> T: Display + <span class="built_in">Clone</span>,</span><br><span class="line">          U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span></span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure>
<p>也可以在返回值中使用 <code>impl Trait</code> 语法，来返回实现了某个 trait 的类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">returns_summarizable</span></span>() -&gt; <span class="keyword">impl</span> Summary &#123;</span><br><span class="line">    Tweet &#123;</span><br><span class="line">        username: <span class="built_in">String</span>::from(<span class="string">&quot;horse_ebooks&quot;</span>),</span><br><span class="line">        content: <span class="built_in">String</span>::from(<span class="string">&quot;of course, as you probably already know, people&quot;</span>),</span><br><span class="line">        reply: <span class="literal">false</span>,</span><br><span class="line">        retweet: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过使用带有 trait bound 的泛型参数的 <code>impl</code> 块，可以有条件地只为那些实现了特定 trait 的类型实现方法。例如，以下的类型 <code>Pair&lt;T&gt;</code> 总是实现了 <code>new</code> 方法，不过只有那些为 <code>T</code> 类型实现了 <code>PartialOrd</code> trait （来允许比较） <strong>和</strong> <code>Display</code> trait （来启用打印）的 <code>Pair&lt;T&gt;</code> 才会实现 <code>cmp_display</code> 方法：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pair</span></span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Pair&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(x: T, y: T) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">Self</span> &#123;</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T: Display + <span class="built_in">PartialOrd</span>&gt; Pair&lt;T&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">cmp_display</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.x &gt;= <span class="keyword">self</span>.y &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;The largest member is x = &#123;&#125;&quot;</span>, <span class="keyword">self</span>.x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;The largest member is y = &#123;&#125;&quot;</span>, <span class="keyword">self</span>.y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以对任何实现了特定 trait 的类型有条件地实现 trait。对任何满足特定 trait bound 的类型实现 trait 被称为 <em>blanket implementations</em>，他们被广泛的用于 Rust 标准库中。例如，标准库为任何实现了 <code>Display</code> trait 的类型实现了 <code>ToString</code> trait。这个 <code>impl</code> 块看起来像这样：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span>&lt;T: Display&gt; <span class="built_in">ToString</span> <span class="keyword">for</span> T &#123;</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode416题解</title>
    <url>/2020/10/11/leetcode416%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="题目描述">题目描述</h2>
<p>给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>
<p>注意:</p>
<p>每个数组中的元素不会超过 100 数组的大小不会超过 200</p>
<p>示例 1:</p>
<p>输入: [1, 5, 11, 5]</p>
<p>输出: true</p>
<p>解释: 数组可以分割成 [1, 5, 5] 和 [11].</p>
<p>示例 2:</p>
<p>输入: [1, 2, 3, 5]</p>
<p>输出: false</p>
<p>解释: 数组不能分割成两个元素和相等的子集.</p>
<a id="more"></a>
<h2 id="题解">题解</h2>
<p><strong>本题是一个NP完全问题！！！</strong>所以想在多项式时间内完成是不可能的，我们必须尝试非多项式时间复杂度的算法，例如时间复杂度与元素大小相关的<strong>动态规划</strong>。实际上，这道题可以换一种表述：给定一个只包含正整数的非空数组 [0]nums[0]，判断是否可以从数组中选出一些数字，使得这些数字的和等于整个数组的元素和的一半。因此这个问题可以转换成「0−1 背包问题」。这道题与传统的「0−1 背包问题」的区别在于，传统的「0−1 背包问题」要求选取的物品的重量之和不能超过背包的总容量，这道题则要求选取的数字的和恰好等于整个数组的元素和的一半。类似于传统的「0−1 背包问题」，可以使用动态规划求解。</p>
<p>在使用动态规划求解之前，首先需要进行以下判断。</p>
<p>根据数组的长度 n 判断数组是否可以被划分。如果 n&lt;2，则不可能将数组分割成元素和相等的两个子集，因此直接返回 false。</p>
<p>计算整个数组的元素和 sum 以及最大元素 maxNum。如果sum 是奇数，则不可能将数组分割成元素和相等的两个子集，因此直接返回 false。如果sum 是偶数，则令 target=sum/2，需要判断是否可以从数组中选出一些数字，使得这些数字的和等于target。如果 maxNum&gt;target，则除了maxNum 以外的所有元素之和一定小于target，因此不可能将数组分割成元素和相等的两个子集，直接返回 false。</p>
<p>创建二维数组 dp，包含 n 行target+1 列，其中 dp[i][j] 表示从数组的[0,i] 下标范围内选取若干个正整数（可以是 0 个），是否存在一种选取方案使得被选取的正整数的和等于 j。初始时，dp 中的全部元素都是 false。</p>
<p>在定义状态之后，需要考虑边界情况。以下两种情况都属于边界情况。</p>
<p>如果不选取任何正整数，则被选取的正整数等于 0。因此对于所有0≤i&lt;n，都有dp[i][0]=true。</p>
<p>当i==0 时，只有一个正整数nums[0] 可以被选取，因此dp[i][0]=true。</p>
<p>对于 i&gt;0且j&gt;0 的情况，如何确定dp[i][j] 的值？需要分别考虑以下两种情况。</p>
<p>如果j≥nums[i]，则对于当前的数字nums[i]，可以选取也可以不选取，两种情况只要有一个为 true，就有dp[i][j]=true。</p>
<p>如果不选取nums[i]，则dp[i][j]=dp[i−1][j]； 如果选取nums[i]，则 dp[i][j]=dp[i−1][j−nums[i]]。 如果 j &lt;nums[i]，则在选取的数字的和等于 j 的情况下无法选取当前的数字nums[i]，因此有dp[i][j]=dp[i−1][j]。</p>
<p>状态转移方程如下：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjl2uugoisj30vk044mxk.jpg" /></p>
<p>最终得到 dp[n−1][target] 即为答案。</p>
<p>但是可以发现在计算dp 的过程中，每一行的 dp 值都只与上一行的 dp 值有关，因此只需要一个一维数组即可将空间复杂度降到 O(target)。此时的转移方程为：</p>
<p><img data-src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjl2v7hzz6j30g802kgln.jpg" /></p>
<p>且需要注意的是第二层的循环我们需要从大到小计算，因为如果我们从小到大更新dp 值，那么在计算dp[j] 值的时候，dp[j−nums[i]] 已经是被更新过的状态，不再是上一行的dp 值。</p>
<p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/solution/fen-ge-deng-he-zi-ji-by-leetcode-solution/">题解来源</a></p>
<h2 id="代码">代码</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canPartition</span>(<span class="params">self, nums: List[int]</span>) -&gt; bool:</span></span><br><span class="line">        n = len(nums)</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        total = sum(nums)</span><br><span class="line">        maxNum = max(nums)</span><br><span class="line">        target = total // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> total % <span class="number">2</span> <span class="keyword">or</span> maxNum &gt; target:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        dp = [<span class="literal">True</span>] + [<span class="literal">False</span>] * target</span><br><span class="line">        <span class="keyword">for</span> _, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(target, num - <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">                dp[j] |= dp[j - num]</span><br><span class="line">        <span class="keyword">return</span> dp[target]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>fast16-NOVA论文笔记</title>
    <url>/2020/10/27/fast16-NOVA%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="摘要">摘要</h2>
<p>NVMM(Non-volatile main memory，非易失性主存)能够提供高速的访问、高带宽和持久性存储。于是管理、访问和维持一致性成了问题。现有的文件系统针对磁盘和固态硬盘，不能利用它的优越性。模拟的NVMM文件系统上开销也很现有的差不多，还不能解决一致性问题。</p>
<p>NOVA将传统的日志结构用在NVMM上。它对每个节点维护分开的日志来提升并发度，并且把文件数据存在磁盘之外来最小化日志大小和减少垃圾回收开销。NOVA的日志提供metadata、data、mmap原子性，把复杂的metadata结构存在DRAM里面来提升查找速度。</p>
<p>state-of-the-art 最先进的</p>
<h2 id="介绍">1.介绍</h2>
<p>emerging 新兴的</p>
<p>albeit 尽管</p>
<p>overhead 开销</p>
<p>squander 浪费</p>
<p>in case of一旦发生；为了防止...</p>
<p>contiguous 相邻的</p>
<p>reclaim 要求收回</p>
<p>bypass 绕过，不管</p>
<p>近来最激动人心的进展就是将NVM放在处理器的内存总线上，在传统的DRAM旁边。这样能把快速但易失的DRAM和速度稍慢但不易失的NVM结合起来成为杂交系统，兼具二者优点。</p>
<p>传统的文件系统不再适合这种杂交系统了，因为他们都是为传统磁盘设计的，符合传统磁盘的一致性。但是NVM很快，DRAM更快，并且他们的一致性要求不一样。前者是扇区原子性，后者是64位存储原子性。</p>
<p>现代CPU和内存系统可能会将存储重新排序到内存，以维持数据的一致性，这种系统在系统故障时一致性会被打破。为了弥补这种情况，文件系统需要显式地刷新CPU缓存中的数据以强制执行顺序，这会浪费NVM的性能。</p>
<p>克服这些问题很重要，因为很多应用程序依赖原子性文件系统操作来保证他们自己的正确性。主流文件系统采用日志、影子分页和日志结构来实现原子性。但是，日志因为要两次写入到存储设施，浪费了带宽。影子分页要求从叶节点到根的一个级联的更新。这些都要求严格的排序操作，会使得性能下降。</p>
<p>日志结构文件系统（Log-structured File System, LFS）将小的随机写组成一个更大的顺序写，有利于硬盘和SSD。但是，传统的LFS依赖于相邻的自由区域的可用性，并且维护这些区域会带来昂贵的垃圾回收开销。因此，近来的研究表明LFS在NVMM上表现的比日志差。</p>
<p>NOVA的优点：高并发、减少log大小、最小化垃圾回收开销、保证传统文件操作和mmap-based存取访问的一致性。NOVA使用链表来存储，这样数据不必在内存中相邻，并且用对日志的尾指针的原子性更新来提供原子性的日志追加。对于跨越多个节点的操作，NOVA使用轻量级日志。</p>
<p>NOVA不会log数据，所以恢复过程只需要扫描NVMM的一小部分，这使得NOVA可以立刻要求回收页当他们过期时，减少了垃圾回收开销，并让NOVA即使在文件系统几乎全满时也能保持良好性能。</p>
<p>这篇论文</p>
<ul>
<li>扩展了现存的日志结构文件系统技术来利用杂交存储系统的特点</li>
<li>描述了mmap，一种简化的接口，能直接将NVMM暴露给具有强一致性的应用</li>
<li>示范了NOVA在杂交存储系统比现存的日志、影子分页、日志结构文件系统的表现都要好</li>
<li>表明NOVA在很多受推荐的NVMM技术中独具一格，提供了别人没有的好处</li>
</ul>
<p>我们用一系列的micro-和macro-benchmarks来评估NOVA，在基于硬件的NVMM模拟器上。</p>
<h2 id="背景">2. 背景</h2>
<p>metadata 元数据</p>
<h3 id="非易失性存储技术">2.1 非易失性存储技术</h3>
<p>新兴的non-volatile 存储技术，例如spin-torque转换器RAM(STT-RAM)，阶段改变存储(PCM)，对抗RAM(ReRAM)和3D XPoint存储技术，能够提供快速、非易失、字节访问级的存储。这些技术有不同的优点和缺点，这使得他们被用在不用的方向。</p>
<h3 id="nvmm软件的挑战">2.2 NVMM软件的挑战</h3>
<p>NVMM软件带来的挑战主要集中在：平衡存储的性能和软件的开销，强制更新的有序来保证一致性，提供原子性更新。</p>
<h4 id="性能">2.2.1性能</h4>
<p>传统的硬盘很慢，所以软件的时延也变的不重要，但是现在NVMM的速度很快，所以软件时延成为了主要时延。</p>
<p>既然NVMM提供了低时延并且被部署在处理器的存储总线上，软件就需要能够通过loads和stores直接访问他们。近来的基于NVMM的文件系统绕过了DRAM页cache并使用一种叫做Direct Access(DAX)或者eXecute In Place(XIP)的技术直接访问NVMM，避免了在存储栈上NVMM和DRAM之间的额外copy操作。NOVA是一个DAX文件系统。</p>
<h4 id="写重排序">2.2.2 写重排序</h4>
<p>现代的处理器和他们的缓存层级结构可能会将存储操作重排序来提升性能。CPU的存储一致性协议保证了内存更新的顺序，但是现存的模型并没有提供当更新到达NVMM时的保证。</p>
<p>考虑到NVMM的软件可以通过显式地刷新cache并提出内存屏障来强制写顺序。x86结构提供clflush命令来刷新CPU cacheline。但是clflush是严格有序的并且不必要地让cacheline作废了，这会带来性能的下降。并且clflush只把数据发送给内存控制器，它并不保证数据会到达内存。内存屏障例如Intel的mfence命令，强制屏障之前和之后的内存操作有序。但是mfence只保证所有的CPU对内存有相同的视角，并没有对写回到NVMM的数据强制顺序。</p>
<h4 id="原子性">2.2.3 原子性</h4>
<p>POSIX风格的文件系统的语义要求很多操作都是原子性的（即，要么都成功要么都不成功）。例如，对于POSIX <em>rename</em> 操作，如果失败，要求不管是老名字的文件还是新名字的文件都不能被创建或是被修改。重命名一个文件是一个只有元数据的操作，但是一些原子性的更新对文件系统元数据和数据都有运用。例如，追加写一个文件原子性地更新了文件数据并改变了文件的长度和修改时间。很多应用的正确性依赖于原子性的文件系统。</p>
<p>存储设备典型地只提供对于原子性的初步实现。磁盘提供原子性的扇区写，处理器只保证8字节的（或者更小的）对齐的存储是原子性的。为了建立文件系统要求的更加复杂的原子性更新，程序员必须使用更加复杂的技术。</p>
<h3 id="建立复杂的原子性操作">2.3 建立复杂的原子性操作</h3>
<p>现存的文件系统使用一系列技术例如日志，影子分页，或者日志结构来提供原子性保证。他们以不同方式并带来不同类型的开销。</p>
<h3 id="日志">2.3.1 日志</h3>
<p>日志（Journaling）（提前写日志）广泛地用在日志文件系统和数据库中来保证原子性。一个日志系统对于所有更新，在应用他们之前先记录在一个日志上，当断电时，重新执行日志来恢复系统到一个稳定的状态。日志机制要求将数据写两次：一次到log一次到目标位置。为了提升性能日志文件系统经常只将metadata记录到日志。最近的工作提出了后向指针（back pointer）和来自耐久性的解耦排序（decoupling ordering from durability）来减小日志机制的开销。</p>
<h4 id="影子分页">2.3.2 影子分页</h4>
<p>很多文件系统使用一种写时复制的机制，叫做影子分页（Shadow paging）。影子分页文件系统很大程度上依赖于他们的树结构来提供原子性。影子分页并不在一次写过程中将数据就地改变，而是写一个被影响页的新拷贝到存储设备的一个空的部分。然后，它将新页粘接到文件系统树，通过更新页和根之间的节点。这带来的级联更新开销是很昂贵的。</p>
<h4 id="日志结构">2.3.3 日志结构</h4>
<p>日志结构文件系统最初是被设计用于完全发掘硬盘驱动器在顺序访问时的高性能。LFS将随机写缓存在内存中，然后将他们转化成更大的对磁盘的顺序写，最大限度地利用硬盘的优势。</p>
<p>尽管LFS是一个优秀的想法，有效地实现它很复杂，因为LFS依赖于对磁盘相邻的空闲区域的顺序写。为了保证对于这些区域的一致性供应，LFS常常清理并合并log来回收那些过期数据的空间。</p>
<p>log清理增加了开销并降低了LFS的性能。为了减少清理的开销，一些LFS设计分离了冷热数据并对他们采用不同的清理方案。SSD在顺序写负载下页表现的很好，所以LFS技术也被应用在了SSD上。SFS技术将块基于他们的更新可能性来分类，然后将有相似的热度的块写到一样的log段中来减少清理开销。F2FS使用多头logging，把元数据和数据写到各自的log中，然后在磁盘使用率高时把新数据直接写到脏段的空闲空间，来减少频繁的垃圾回收。</p>
<p>RAMCloud是一个基于DRAM的存储系统，把它的所有数据都保存在DRAM中来服务读操作并维持一个持久的版本在硬盘上。RAMClound对DRAM和硬盘都用了log结构，它将DRAM以一种日志结构的方式分配，达到了比其他内存分配器更高的DRAM分配率。并把备份数据以log形式存在硬盘上。</p>
<h3 id="针对-nvmm-的文件系统">2.4 针对 NVMM 的文件系统</h3>
<p>很多团队已经设计出基于NVMM的文件系统，能够解决2.2中提出了一些问题，通过使用一种或者更多的2.3中提出的技术。但是没有人能够达到现代应用程序在文件系统上的所有要求。</p>
<p>BPFS是一个影子分页文件系统，提供元数据和数据持久性。BPFS提出了一种硬盘机制来强迫存储耐久性和有序性。BPFS使用短回路影子分页来减少影子分页在通常情况下的开销。但是特定的跨越文件系统树的一大部分的操作（例如在字典之间移动）仍然能带来很大开销。</p>
<p>PMFS是一种轻量级的DAX文件系统，绕过了block层和文件系统页cache来提升性能。PMFS对于元数据更新使用日志。它对于写操作是就地执行，所以不是原子性的。</p>
<p>Ext4-DAX用DAX能访问NVMM的能力扩展了Ext4，并使用日志来保证元数据更新的原子性。正常的（非DAX的）Ext4文件系统you一个数据-日志模式来提供数据原子性。Ext4-DAX并不支持这种模式，所以它不是原子性的。</p>
<p>SCMFS使用操作系统的虚拟内存管理模块并将文件映射到大的相邻的虚拟地址区域，让文件的访问变得简单且轻量级。SCMFS并不支持任何的对于元数据或者数据一致性保证。</p>
<p>Aerie在用户空间实现了文件系统接口和功能来提供对NVMM中数据低时延的访问。它有一个优化，通过放宽POSIX语义来提升性能。Aerie对于元数据建立日志，但是并不支持数据原子性或者mmap操作。</p>
<h2 id="nova-设计概括">3. NOVA 设计概括</h2>
<p>stem 花的茎，阻止（液体流动等）</p>
<p>stem from... 源自于</p>
<p>radix 基数</p>
<p>NOVA是一个日志结构的，POSIX文件系统，建立于LFS的优点上，并把它们的优点和杂交存储系统的优点结合起来。因为它针对了一个不同的存储技术，NOVA看起来和传统的为了最大化磁盘带宽而建立的日志文件文件系统很不一样。</p>
<p>我们将NOVA建立在三个观察上。首先，支持原子性更新的日志在NVMM中很容易实现，但是它们对于查找操作并不是很高效（例如，字典查询和随机访问一个文件）。相反地，支持快速查询的数据结构（树结构）很难在NVMM中正确且高效地实现。第二，清理日志的复杂性主要源自于提供存储中相邻的空闲区域，但是这在NVMM中并不必要，因为随机访问很快。第三，使用单个日志对于磁盘有意义（磁盘有一个磁头，因此提升空间局部性是首要任务），但是它限制了并发。既然NVMM支持快速、高并发的随机读取，使用多日志并不对性能有什么负面影响。</p>
<p>基于以上的观察，我们设计了NOVA。</p>
<h3 id="将日志保存在nvmm中将索引保存在dram中">3.1 将日志保存在NVMM中，将索引保存在DRAM中</h3>
<p>NOVA将日志和文件数据保存在NVMM中，并建立了根树在DRAM中来提升查找操作的速度，让在NVMM中的数据结构简单且高效。我们使用了一棵基数树，因为在Linux内核中有对这个的成熟的，经过完整测试的，使用广泛的实现。基数树的叶子结点指向日志中的条目，条目又依次指向文件数据。</p>
<h3 id="给每个节点自己的日志">3.2 给每个节点自己的日志</h3>
<p>每个NOVA中的节点有它自己的日志，允许跨越文件的并发更新而无需同步。这个结构允许在文件访问和恢复过程中的并发。NOVA也保证了有效的日志条目数目很小（基于文件的大小程度），保证了扫描日志很快。</p>
<h3 id="使用logging和轻量日志来进行复杂的原子性更新">3.3 使用logging和轻量日志来进行复杂的原子性更新</h3>
<p>NOVA是日志结构的，因为它相比日志和影子分页提供了更廉价的原子性更新。为了原子性地将数据写到log中，NOVA首先将数据追加写到log，然后原子性地更新日志尾部来提交更新，因而避免了日志文件系统的双倍写开销和影子分页的级联开销。</p>
<p>一些字典操作，例如一次字典之间的移动，跨越多个节点，对此NOVA使用日志去原子性地更新多个logs。NOVA首先将数据写到每个节点的log的尾部，然后将日志尾部的更新记录到日志中来原子性地更新它们。NOVA的日志是轻量级的因为它只包含log尾部（相比元数据和数据而言），并且非POSIX文件操作在超过四个节点上操作。</p>
<h3 id="实现log为一个单独的链表">3.4 实现log为一个单独的链表</h3>
<p>顺序log的局部性优势在基于NVMM的存储上显得不是那么重要，所以NOVA使用一个4KB NVMM页的链表来存储log和指向下一页的指针。</p>
<p>允许非顺序的log存储提供了三个好处。首先，分配log空间变得容易了，因为NOVA不必再去分配大的、相邻的区域给log。第二，NOVA可以在细粒度（页大小粒度）上有更好的log清理表现。第三，收回包含过期数据的log页只需要一些指针的操作即可。</p>
<h3 id="不将文件数据存在log上">3.5 不将文件数据存在log上</h3>
<p>在NOVA中的节点log并不包含文件数据。取而代之的是，NOVA使用写时复制来修改页并将对于这次写以元数据形式追加到log。这个元数据描述了这次写，并指向数据页。4.4详细描述了文件写操作。</p>
<p>对于文件数据使用写时复制技术是很有用的，有以下几个原因。首先，它使得log更短，加速了恢复过程。其次，它使得垃圾回收更加简单且高效，因为NOVA永远不必把文件数据从log中拷贝出来来收回一个log页。第三，收回过期的页和分配新的数据页都变简单了，因为它们只需要添加和移除DRAM中的空闲列表中的页。第四，既然它可以立即收回过期的数据页，NOVA可以在很高的写负载和很高的NVMM使用率下仍然维持性能。</p>
<p>下一部分描述了NOVA的具体实现。</p>
<h2 id="实现nova">4. 实现NOVA</h2>
<p>hook 钩子</p>
<p>我们在Linux内核4.0版本上实现了NOVA。NOVA使用内核中现存的NVMM钩子并通过了Linux POSIX文件系统测试。</p>
]]></content>
      <categories>
        <category>计算机</category>
        <category>英语论文</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>latex学习笔记（一）</title>
    <url>/2020/10/15/latex%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>latex分数：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">frac</span><span class="string">&#123;分子&#125;</span><span class="string">&#123;分母&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>latex小于等于:</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">leq</span></span>或<span class="tag">\<span class="name">le</span></span></span><br></pre></td></tr></table></figure>
<p>大于等于：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">geq</span></span>或<span class="tag">\<span class="name">ge</span></span></span><br></pre></td></tr></table></figure>
<p>Mac下可以将输入法切换为希腊文来打希腊字母</p>
<p>不等于：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="tag">\<span class="name">ne</span></span></span><br></pre></td></tr></table></figure>
<p>大括号：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">LeakyReLU=<span class="tag">\<span class="name">left</span></span><span class="tag">\<span class="name">&#123;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;array&#125;</span><span class="string">&#123;lr&#125;</span></span></span><br><span class="line">x&amp;x<span class="tag">\<span class="name">geq</span></span>0  <span class="tag">\<span class="name">\</span></span></span><br><span class="line">px&amp;x&lt;0 </span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;array&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">right</span></span>.</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><span class="math display">\[LeakyReLU=\left\{
\begin{array}{lr}
x&amp;x\geq0  \\
px&amp;x&lt;0 
\end{array}
\right.\]</span></p>
<p>去mathjax.org可以在线将latex转为mathML，然后可以直接拷贝到word中变成公式，然后就可以拷贝到ppt中。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>latex</tag>
        <tag>论文写作</tag>
        <tag>word</tag>
        <tag>ppt</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记（四）</title>
    <url>/2020/10/18/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><strong>包</strong>（<em>Packages</em>）： Cargo 的一个功能，它允许你构建、测试和分享 crate。</li>
<li><strong>Crates</strong> ：一个模块的树形结构，它形成了库或二进制项目。</li>
<li><strong>模块</strong>（<em>Modules</em>）和 <strong>use</strong>： 允许你控制作用域和路径的私有性。</li>
<li><strong>路径</strong>（<em>path</em>）：一个命名例如结构体、函数或模块等项的方式</li>
</ul>
<p><em>包</em>（<em>package</em>） 是提供一系列功能的一个或者多个 crate。一个包会包含有一个 <em>Cargo.toml</em> 文件，阐述如何去构建这些 crate。包中所包含的内容由几条规则来确立。一个包中至多 <strong>只能</strong> 包含一个库 crate(library crate)；包中可以包含任意多个二进制 crate(binary crate)；包中至少包含一个 crate，无论是库的还是二进制的。</p>
<p>Cargo 遵循的一个约定：<em>src/main.rs</em> 就是一个与包同名的二进制 crate 的 crate 根。同样的，Cargo 知道如果包目录中包含 <em>src/lib.rs</em>，则包带有与其同名的库 crate，且 <em>src/lib.rs</em> 是 crate 根。crate 根文件将由 Cargo 传递给 <code>rustc</code> 来实际构建库或者二进制项目。</p>
<p>通过将文件放在 <em>src/bin</em> 目录下，一个包可以拥有多个二进制 crate：每个 <em>src/bin</em> 下的文件都会被编译成一个独立的二进制 crate。</p>
<p>一个 crate 会将一个作用域内的相关功能分组到一起，使得该功能可以很方便地在多个项目之间共享。举一个例子， <code>rand</code> crate 提供了生成随机数的功能。通过将 <code>rand</code> crate 加入到我们项目的作用域中，我们就可以在自己的项目中使用该功能。<code>rand</code> crate 提供的所有功能都可以通过该 crate 的名字：<code>rand</code> 进行访问。</p>
<p>将一个 crate 的功能保持在其自身的作用域中，可以知晓一些特定的功能是在我们的 crate 中定义的还是在 <code>rand</code> crate 中定义的，这可以防止潜在的冲突。例如，<code>rand</code> crate 提供了一个名为 <code>Rng</code> 的特性（trait）。我们还可以在我们自己的 crate 中定义一个名为 <code>Rng</code> 的 <code>struct</code>。因为一个 crate 的功能是在自身的作用域进行命名的，当我们将 <code>rand</code> 作为一个依赖，编译器不会混淆 <code>Rng</code> 这个名字的指向。在我们的 crate 中，它指向的是我们自己定义的 <code>struct Rng</code>。我们可以通过 <code>rand::Rng</code> 这一方式来访问 <code>rand</code> crate 中的 <code>Rng</code> 特性（trait）。</p>
<p><em>模块</em> 让我们可以将一个 crate 中的代码进行分组，以提高可读性与重用性。模块还可以控制项的 <em>私有性</em>，即项是可以被外部代码使用的（<em>public</em>），还是作为一个内部实现的内容，不能被外部代码使用（<em>private</em>）。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">seat_at_table</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mod</span> serving &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">server_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fn</span> <span class="title">take_payment</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上定义的模块构成了一个模块树：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crate</span><br><span class="line"> └── front_of_house</span><br><span class="line">     ├── hosting</span><br><span class="line">     │   ├── add_to_waitlist</span><br><span class="line">     │   └── seat_at_table</span><br><span class="line">     └── serving</span><br><span class="line">         ├── take_order</span><br><span class="line">         ├── serve_order</span><br><span class="line">         └── take_payment</span><br></pre></td></tr></table></figure>
<p>路径有两种形式：</p>
<ul>
<li><strong>绝对路径</strong>（<em>absolute path</em>）从 crate 根开始，以 crate 名或者字面值 <code>crate</code> 开头。</li>
<li><strong>相对路径</strong>（<em>relative path</em>）从当前模块开始，以 <code>self</code>、<code>super</code> 或当前模块的标识符开头。</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    <span class="comment">// Absolute path</span></span><br><span class="line">    crate::front_of_house::hosting::add_to_waitlist();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Relative path</span></span><br><span class="line">    front_of_house::hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>兄弟模块之间可以互相访问，子模块可以访问父模块，但是父模块无法访问私有的子模块。</p>
<p>使用super开头的路径示例如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">serve_order</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mod</span> back_of_house &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fix_incorrect_order</span></span>() &#123;</span><br><span class="line">        cook_order();</span><br><span class="line">        super::serve_order();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">cook_order</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般采用绝对路径。</p>
<p>对于公有结构体，其内部成员仍然是私有的，需要显示指定为公有。如果一个结构体含有私有变量，那么最好提供一个公有的静态初始化方法，否则外部将无法创建这个结构体的实例。</p>
<p>对于公有枚举，其内部所有成员默认也是公有的。</p>
<p>可以通过use将模块引入作用域来简化路径的书写：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">        <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>use</code> 将函数引入作用域的习惯用法是use到函数的父模块而不是use到函数。要想使用 <code>use</code> 将函数的父模块引入作用域，我们必须在调用函数时指定父模块，这样可以清晰地表明函数不是在本地定义的，同时使完整路径的重复度最小化。</p>
<p>另一方面，使用 <code>use</code> 引入结构体、枚举和其他项时，习惯是指定它们的完整路径。</p>
<p>当使用 <code>use</code> 关键字将名称导入作用域时，在新作用域中可用的名称是私有的。如果为了让调用你编写的代码的代码能够像在自己的作用域内引用这些类型，可以结合 <code>pub</code> 和 <code>use</code>。这个技术被称为 “<em>重导出</em>（<em>re-exporting</em>）”，因为这样做将项引入作用域并同时使其可供其他代码引入自己的作用域。</p>
<p>我们可以使用嵌套路径将相同的项在一行中引入作用域。这么做需要指定路径的相同部分，接着是两个冒号，接着是大括号中的各自不同的路径部分</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">use</span> std::&#123;cmp::Ordering, io&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Write;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, Write&#125;;</span><br></pre></td></tr></table></figure>
<p>如果希望将一个路径下 <strong>所有</strong> 公有项引入作用域，可以指定路径后跟 <code>*</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::*;</span><br></pre></td></tr></table></figure>
<p>在 <code>mod front_of_house</code> 后使用分号，而不是代码块，这将告诉 Rust 在另一个与模块同名的文件中加载模块的内容。</p>
<p>例如，有一个front_of_house.rs中有如下代码：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在lib.rs中想引用的话，定义如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mod</span> front_of_house;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">use</span> crate::front_of_house::hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">eat_at_restaurant</span></span>() &#123;</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">    hosting::add_to_waitlist();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续重构我们例子，将 <code>hosting</code> 模块也提取到其自己的文件中，仅对 <em>src/front_of_house.rs</em> 包含 <code>hosting</code> 模块的声明进行修改：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> hosting;</span><br></pre></td></tr></table></figure>
<p>接着我们创建一个 <em>src/front_of_house</em> 目录和一个包含 <code>hosting</code> 模块定义的 <em>src/front_of_house/hosting.rs</em> 文件：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">add_to_waitlist</span></span>() &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>模块树依然保持相同，<code>eat_at_restaurant</code> 中的函数调用也无需修改继续保持有效，即便其定义存在于不同的文件中。这个技巧让你可以在模块代码增长时，将它们移动到新文件中。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode845题解</title>
    <url>/2020/10/25/leetcode845%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>leetcode845题，一道动态规划题。</p>
<p>题目描述：</p>
<p>我们把数组 A 中符合下列属性的任意连续子数组 B 称为 “山脉”：</p>
<p>B.length &gt;= 3 存在 0 &lt; i &lt; B.length - 1 使得 B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1] （注意：B 可以是 A 的任意子数组，包括整个数组 A。）</p>
<p>给出一个整数数组 A，返回最长 “山脉” 的长度。</p>
<p>如果不含有 “山脉” 则返回 0。</p>
<p>示例 1：</p>
<p>输入：[2,1,4,7,3,2,5] 输出：5 解释：最长的 “山脉” 是 [1,4,7,3,2]，长度为 5。 示例 2：</p>
<p>输入：[2,2,2] 输出：0 解释：不含 “山脉”。</p>
<p>提示：</p>
<p>0 &lt;= A.length &lt;= 10000 0 &lt;= A[i] &lt;= 10000</p>
<p>题解：</p>
<p>可以用动态规划的方法做。针对每个元素维护两个数组，一个left一个right，left表示在这个元素“左山脉”的长度（即如果它有山脉的话，山脉在它左边的长度），例如，示例1中A[1]的左山脉长度为0，A[2]的左山脉长度为1，同理right为“右山脉”的长度。很明显有以下转移方程：</p>
<p><span class="math display">\[left[i]=\left\{
\begin{array}{lr}
left[i-1]+1&amp;A[i]&gt;A[i-1]  \\
0&amp;A[i]\le A[i-1]
\end{array}
\right.\]</span></p>
<p><span class="math display">\[right[i]=\left\{
\begin{array}{lr}
right[i+1]+1&amp;A[i]&gt;A[i+1]  \\
0&amp;A[i]\le A[i+1]
\end{array}
\right.\]</span></p>
<p>并且<span class="math display">\[left[0]=left[n-1]=0,right[0]=right[n-1]=0\]</span></p>
<p>最后计算山脉的长度时，将左山脉+右山脉+1即可。注意如果左山脉或者右山脉为0则山脉长度为0（因为这时山脉已经不存在了）</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestMountain</span>(<span class="params">self, A</span>):</span></span><br><span class="line">        n = len(A)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = [<span class="number">0</span>] * n</span><br><span class="line">        right = [<span class="number">0</span>] * n</span><br><span class="line">        mountainLength = [<span class="number">0</span>] * n </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> A[i] &gt; A[i<span class="number">-1</span>]:</span><br><span class="line">                left[i] = left[i<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> A[i] &gt; A[i+<span class="number">1</span>]:</span><br><span class="line">                right[i] = right[i+<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> left[i] == <span class="number">0</span> <span class="keyword">or</span> right[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            mountainLength[i] = left[i] + right[i] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max(mountainLength)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu换源</title>
    <url>/2020/11/06/ubuntu%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<p>有时候为了加速下载软件包，或者下载一些官方源没有的软件，可以考虑给ubuntu换源。</p>
<p>首先运行<code>lsb_release -c</code>查看当前系统的版本号。然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;apt</span><br><span class="line">sudo mv sources.list sources.list.bak</span><br></pre></td></tr></table></figure>
<p>保存系统原来的源。</p>
<p>然后<code>gedit sources.list</code>编辑新源的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename main multiverse restricted universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-backports main multiverse restricted universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-proposed main multiverse restricted universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-security main multiverse restricted universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-updates main multiverse restricted universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename main multiverse restricted universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-backports main multiverse restricted universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-proposed main multiverse restricted universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-security main multiverse restricted universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; $Codename-updates main multiverse restricted universe</span><br></pre></td></tr></table></figure>
<p>将其中$Codename替换成你刚才看到的版本号即可。</p>
<p>最后<code>sudo apt-get update</code>更新即可。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次重装电脑系统经历</title>
    <url>/2020/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%87%8D%E8%A3%85%E7%94%B5%E8%84%91%E7%B3%BB%E7%BB%9F%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>今天想在自己电脑上装linux双系统，结果没操作好反而把自己电脑原来系统搞崩了。一开机就是显示无效的分区表，参照网上很多文章都没用，没办法只能重装系统了。</p>
<p>其实重装系统之前就装过很多次，只是都没记录下来。这次特地记录一下防止自己忘记。</p>
<p>首先去官网下载win10系统的镜像文件，也就是.iso文件。这个我直接在我们学校官网下的。然后准备一个空u盘，容量至少8G吧。去网上下载一个u盘启动盘制作软件，我用的是rufus。然后，将iso文件刻录到u盘上，期间会格式化u盘，所以我们才要求一个空u盘。</p>
<p>注意的是要把磁盘文件格式选为GPT，引导方式改为UEFI，因为现在流行的都是这种GPT+UEFI引导方式，原来的MBR+BIOS已经淘汰了，现在windows装系统都是UEFI引导，并且不允许在MBR盘上装。</p>
<p>需要注意的是你自己的电脑的硬盘格式也要是GPT，查看方式是输入win+R，然后输入msinfo32，出现的引导方式如果是传统，那么就说明你是MBR，如果是UEFI，那么你就是GPT。将MBR硬盘改成GPT的方式如下：</p>
<p>在cmd中输入（正常开机后，按win+R，再输入cmd就能进入cmd。如果你是在重装系统的时候才发现需要改成GPT格式，输入Shift+F10就能进入cmd）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">diskpart</span><br></pre></td></tr></table></figure>
<p>进入diskpart，依次输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">list disk <span class="comment"># 显示有哪些磁盘的磁盘</span></span><br><span class="line"><span class="built_in">select</span> disk <span class="number">0</span> <span class="comment"># 选择编号为0的磁盘</span></span><br><span class="line">clean <span class="comment"># 清除磁盘所有分区</span></span><br><span class="line">convert gpt <span class="comment"># 将磁盘格式转换为gpt</span></span><br><span class="line">list partition <span class="comment"># 查看当前磁盘分区情况</span></span><br><span class="line">create partition efi size=<span class="number">100</span> <span class="comment"># 默认大小为M</span></span><br><span class="line">create partition msr size =<span class="number">128</span></span><br><span class="line">create partition primary size =<span class="number">102400</span> <span class="comment"># 此处为你想设置C盘的大小</span></span><br></pre></td></tr></table></figure>
<p>最后两次输入exit，搞定！</p>
<p>如果你的电脑硬盘已经是GPT格式，那么就不需要上述操作，如果不是最好还是把硬盘转换成GPT格式，因为GPT格式已经逐渐成为现在的主流，未来的引导方式肯定也是只能支持GPT的了。注意转换过程中会格式化你的c盘所以最好备份一下。</p>
<p>将iso文件刻录到u盘上之后，你的u盘就变成了启动盘。将u盘插在要重装系统的电脑上，开机，刚刚显示电脑品牌图标的时候迅速按下F12键（有些品牌的电脑是F2），进入bios系统。</p>
<p>进入bios系统之后将启动方式更改了usb设备，然后退出，电脑就会进入你的u盘启动盘里面的系统了。</p>
<p>接下来就比较简单了，一路按照要求安装win10就可以了。</p>
<p>安装好了以后可能需要安装一些驱动软件，因为裸操作系统可能是没有驱动的。可以去网上下载一个驱动精灵，如果连网卡驱动都没有，就去能联网的机子上下一个然后用u盘拷到这台电脑上。</p>
<p>接下来说说如何装ubuntu双系统。</p>
<p>首先去网上下载ubuntu的镜像，可以去国内的镜像站例如清华的，会快一点，下好了以后同样是准备一个空u盘刻录。</p>
<p>刻录完了以后，打开你的win10系统，右键“此电脑”，点击“管理”，进入磁盘管理界面。选择一个比较大的分区，右键点击“压缩卷”，里面输入大小，就是你要分配给ubuntu系统的大小，空间足够建议直接分100G，空间小就40G吧。</p>
<p>如果你是双硬盘，SSD+机械，SSD做系统盘，这种配置的话，在SSD里面分500M的空间。</p>
<p>然后，插入u盘重启，同样是进入bios，选择u盘启动，然后进入u盘里面的系统开始安装。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow学习笔记（一）</title>
    <url>/2020/09/29/tensorflow%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="创建张量">创建张量</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.constant(<span class="number">1.2</span>) <span class="comment"># 创建一个0维张量，也叫标量，shape为[]</span></span><br><span class="line">tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 创建一个1维张量，也叫向量，shape为[3]</span></span><br><span class="line">tf.constant([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">4</span>]]) <span class="comment"># 创建一个2维张量，也叫矩阵，shape为[2, 2]</span></span><br><span class="line">tf.constant([[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>]], [[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>]]]) <span class="comment"># 创建一个3维张量，shape为[2, 2, 2]</span></span><br></pre></td></tr></table></figure>
<p>1维及以上的张量都要用list来创建。</p>
<p>另外，还支持传入字符串和布尔类型变量来创建张量。但是tensorflow类型的布尔变量和python内置类型的布尔变量并不相等。</p>
<a id="more"></a>
<p>可以用dtype参数指定传入数据的精度，访问张量的dtype变量可以获得它的数据精度。</p>
<p>使用<code>tf.cast(tensor, dtype)</code>改变张量的精度，其中，tensor表示待转换数据精度的张量，dtype表示将其转换成的精度。转换时，要注意可能发生的溢出错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.constant(<span class="number">12345678</span>, dtype=int32) <span class="comment"># 组成a的数据精度被指定为int32</span></span><br><span class="line">print(a.dtype) <span class="comment"># 结果为int32</span></span><br><span class="line">a = tf.cast(a, dtype=double) <span class="comment"># 将a的数据精度改为double</span></span><br></pre></td></tr></table></figure>
<p>另外，<code>tf.convert_to_tensor()</code>也可以将Numpry Array和Python List对象转化为张量，其用法和<code>tf.constant()</code>一样，二者功能也一样。</p>
<h2 id="创建待优化张量">创建待优化张量</h2>
<p>为了区分需要计算梯度信息的张量与不需要计算梯度信息的张量，TensorFlow 增加了 一种专门的数据类型来支持梯度信息的记录：tf.Variable。tf.Variable 类型在普通的张量类 型基础上添加了 name，trainable 等属性来支持计算图的构建。由于梯度运算会消耗大量的 计算资源，而且会自动更新相关参数，对于不需要的优化的张量，如神经网络的输入𝑿， 不需要通过 tf.Variable 封装；相反，对于需要计算梯度并优化的张量，如神经网络层的𝑾 和𝒃，需要通过 tf.Variable 包裹以便TensorFlow跟踪相关梯度信息。</p>
<p>可以将普通张量传入来创建，也可以直接创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">aa = tf.Variable(a)</span><br><span class="line">aaa = tf.Variable([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(a.trainable) <span class="comment"># trainable变量表示是否需要优化，对于待优化张量，这个值一般为True，也可以设置为False</span></span><br></pre></td></tr></table></figure>
<h2 id="其余常用创建方法">其余常用创建方法</h2>
<h3 id="创建全0或全1张量">创建全0或全1张量</h3>
<h2 id="拼接函数">拼接函数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.concat(tensors, axis)</span><br></pre></td></tr></table></figure>
<p>其中，tensors表示需要拼接的张量，axis表示在哪一个维度上拼接，要求非拼接的维度必须一致。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.random.normal([<span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>])</span><br><span class="line">b = tf.random.normal([<span class="number">6</span>, <span class="number">6</span>, <span class="number">10</span>])</span><br><span class="line">c = tf.concat([a, b], axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># c的shape为(10, 6, 10)</span></span><br></pre></td></tr></table></figure>
<h2 id="堆叠函数">堆叠函数</h2>
<p>拼接函数直接在现有维度上合并，不创建新的维度，如果需要创建新的维度，使用堆叠函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.stack(tensors, axis)</span><br></pre></td></tr></table></figure>
<p>其中，tensors表示需要堆叠的张量，axis表示新维度插入的维度，当axis&gt;=0时，插入在该维度之前，当axis&lt;0时，插入在该维度之后。</p>
<p>堆叠函数需要所有被堆叠的张量维度都一致。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.random.normal([<span class="number">35</span>, <span class="number">8</span>])</span><br><span class="line">b = tf.random.normal([<span class="number">35</span>, <span class="number">8</span>])</span><br><span class="line">c = tf.stack([a, b], axis=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># c的shape为(35, 8, 2)</span></span><br></pre></td></tr></table></figure>
<h2 id="分割函数">分割函数</h2>
<p>分割函数是拼接的逆函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tf.split(x, num_or_size_splits, axis)</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>x表示待分割张量</li>
<li>num_or_size_splits表示切割方案。当其为单个值时，如10，表示等长切割为10份。当其为List时，表示按list的结构去分割。</li>
<li>axis表示指定在哪个维度进行分割</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tf.random.normal([<span class="number">10</span>, <span class="number">35</span>, <span class="number">8</span>])</span><br><span class="line">result = tf.split(a, <span class="number">10</span>, axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># result长度为10，其中每个元素的shape为(1, 35, 8)</span></span><br><span class="line">result2 = tf.split(a, [<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># result2长度为4，其中4个元素的shape分别为(4, 35, 8), (2, 35, 8), (2, 35, 8), (2, 35, 8)</span></span><br></pre></td></tr></table></figure>
<p>特别地，如果希望在某个维度上全部按长度为 1 的方式分割，还可以使用 <code>tf.unstack(x, axis)</code>函数。这种方式是 tf.split 的一种特殊情况，切割长度固定为 1，只需要指定切割维度 的索引号即可。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>LSM-Tree及其相关知识</title>
    <url>/2020/11/21/LSM-Tree%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>首先放上几篇文章，个人觉得讲的很好的：</p>
<p><a href="https://www.jianshu.com/p/3fb899684392">关于B树、B+树、LSM-Tree这几种数据结构的介绍</a></p>
<p><a href="https://blog.csdn.net/SweeNeil/article/details/86482781">LSM-Tree与LevelDB</a></p>
<p><a href="http://www.manongjc.com/article/17436.html">LevelDB详细讲解</a></p>
<p><a href="https://daemondshu.github.io/2019/03/21/Programming/Data%20Structure/LevelDB_RocksDB/">LevelDB与RocksDB</a></p>
<p>然后是个人拙见（这篇文章是信息存储课交的报告，在此感谢我的两位室友，fd和ljl，名字就不放了）：</p>
<p>基于LSM-Tree的存储技术的调研</p>
<p><strong>摘</strong> <strong>要：</strong>近年来，一种新型的数据存储结构——LSM-Tree受到业界的广泛欢迎。由于其在顺序写方面的优异性能和顺序读方面的尚可表现，逐渐替代B+树成为KV数据库的首选结构。如今一些著名的开源NoSQL数据库——例如Google的LevelDB、Facebook的RocksDB等都采用了LSM-Tree这种存储结构。但是，LSM-Tree仍然有一些问题，例如读写放大、无法进行范围读等等。对此，科研人员也提出了很多优化方案。在这篇文章中，我们首先介绍了LSM-Tree的出现背景，分析了它的结构与原理，并与B+树进行对比。然后，我们介绍了LSM-Tree在一些主流NoSQL数据库中的应用。最后，我们介绍了一些典型的性能较好的对LSM-Tree的具体优化措施。</p>
<p><strong>关键词：</strong>数据存储结构；LSM-Tree；数据库</p>
<p>Abstract: In recent years, a new kind of storage structure called LSM-Tree has been widely adopted by the industry. Due to its excellent performance in sequential write and not-so-bad score in sequential read, it has taken place of B+ Tree to be the prior choice of KV database gradually. Nowadays some famous open source NoSQL database, such as LevelDB of Google and RocksDB of Facebook, all take LSM-Tree as their storage structure. However, there still exist a few problems in LSM-Tree like read and write amplification or poor scan performance. Scientists have been dedicated in the research about the optimization of LSM-Tree and a quantity of strategies have been proposed. In this article we firstly introduce the background of LSM-Tree's emergence, analyze its structure and principle and compare it with B+ Tree. We then list the application of LSM-Tree in some prevalent NoSQL database. Finally, we discuss some typical high-performance optimization approaches towards LSM-Tree.</p>
<p><strong>Key words:</strong> storage structure；LSM-Tree；database</p>
<h1 id="引言">1 引言</h1>
<p>LSM-Tree全称是Log-Structured Merge-Tree(日志结构合并树)，是近年来新兴起的一种数据结构，并迅速且广泛地在KV存储中得到应用。现在很多大型的NoSQL数据库，采用KV存储，底层都是LSM-Tree这种结构，包括LevelDB、RocksDB、Cassandra等等。LSM-Tree的特点是将所有的数据先缓存在内存中，然后再顺序地刷到磁盘上，所有的写都被转换成追加写，在刷到磁盘上时对这些追加写进行合并。相比于传统的MySQL数据库采用的B+树存储，LSM-Tree的优点是写的速度很快（因为磁盘的追加写速度远高于随机写），同时空间利用率很高，也很利于并发与恢复。但是，LSM-Tree中也存在一些问题，典型的就是读写放大，近年来很多文章都着力于优化LSM-Tree的结构来降低读写放大开销。</p>
<p>在文章接下来的内容，主要分为以下几个部分：在第二章我们将介绍LSM-Tree出现的背景，在第三章我们会介绍LSM-Treed的结构以及它与B+树的对比，第四章简单列举了一下LSM-Tree在现代数据库中的应用，第五章讲述了LSM-Tree仍然存在的挑战与近年来对它的优化工作，最后我们对文章作出总结、提出自己的一点看法。</p>
<h1 id="lsm-tree出现的背景">2 LSM-Tree出现的背景</h1>
<p>长久以来，数据库存储引擎中有两种更新策略，一种叫in-place update，一种叫out-of-place update[14]。前者指的是直接覆盖旧的记录去存储新的记录，典型代表如B+树；后者指的是不直接覆盖旧纪录，而是把这次更新存在新的位置，典型代表就是LSM-Tree。In-place update是读友好的，因为只有最近版本的数据被存储了，但是，这种设计牺牲了写性能，因为它会带来随机写，而磁盘的随机写性能很差，另外，磁盘页会被update和delete分成碎片，不利于空间的利用。相对地，out-of-place update提升了写性能，因为它利用了顺序写，磁盘的顺序写性能是远远高于随机写的。因为没有覆盖旧数据，所以它的恢复过程也变的简单。但是，这样做牺牲了读性能，因为数据可能被存放在任何位置，同时，我们需要一个将分散数据重组的过程来提高存储和访问效率。</p>
<p>基于out-of-place update的存储结构早在上世纪70年代就有人提出，例如Differential Files[1]、Postgres project[2]等等。但是，它们都没有解决读请求慢以及空间利用率差的问题。1996年，O Neil[3]等人提出了LSM-Tree，通过设计了一个磁盘上的合并过程，终于较好地解决了这两个问题。</p>
<p>现在，随着Web2.0时代的到来，互联网上的非结构化数据（例如：图片、视频、HTML文档等）呈指数级增长，这些数据很难用传统的关系型数据库去存储，而且它们数量巨大，传统的关系型数据库因为扩展性差难以胜任存储。取而代之的，KV型NoSQL数据库能够很好的存储它们，同时还能提供更好的扩展性与存储海量数据的能力，这种数据库也开始逐渐流行起来。海量数据存储NoSQL数据库的特点就是写多读少，而LSM-Tree恰好符合这一特点。2006年Google提出了BigTable[9]，开启了分布式NoSQL数据库的先河，并率先使用LSM-Tree，随后，越来越多的NoSQL数据库采用LSM-Tree结构。现在，几乎所有NoSQL数据库底层都采用了LSM-Tree这种数据结构。</p>
<h1 id="lsm-tree与btree对比">3 LSM-Tree与B+Tree对比</h1>
<h2 id="btree">3.1 B+Tree</h2>
<p>我们首先介绍一下B+树的前身：B树。在计算机科学中，B树是一种自平衡树数据结构，用于维护排序的数据，并允许以对数时间进行搜索，顺序访问，插入和删除。 B树允许具有两个以上子节点的节点，B树其实可以被看成“多叉树”，二叉树是B树2阶的特例。与其他自平衡二分搜索树不同，B树非常适合于读写相对较大的数据块（例如磁盘）的存储系统。 它通常用于数据库和文件系统。</p>
<p>B树是由Rudolf Bayer和Edward M.McCreight在波音研究实验室工作时发明的，目的是有效地管理大型随机访问文件的索引页。</p>
<p>根据Knuth的定义，阶数为m的B树是满足以下属性的树：</p>
<p>· 每个节点最多有m个孩子。</p>
<p>· 每个非叶节点（根除外）至少具有⌈m/2⌉个子节点。</p>
<p>· 如果根不是叶节点，则根至少有两个子代。</p>
<p>· 一个有k个子节点的非叶子节点包含k − 1个密钥。</p>
<p>· 所有叶子都出现在同一层</p>
<p>下图是一个4阶的B树的示意图：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image002.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图3-1 4阶B树示意图</p>
<p>B树的搜索过程是：从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p>
<p>B+树是对B树的一种变形，与B树的差异在于：</p>
<p>\1. 非叶子节点的子节点数=关键字数。非叶子节点不保存数据，只用来索引，所有数据都保存在叶子节点。</p>
<p>\2. 所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</p>
<p>\3. 为所有叶子结点增加一个链指针，便于区间查找和遍历。</p>
<p>\4. 所有关键字都在叶子结点出现。</p>
<p>下图是一棵4阶B+树示意图：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image004.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图3-2 4阶B+树示意图</p>
<p>B+树的搜索与B树也基本相同，区别是B+树只有达到叶子结点才命中（B树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找。</p>
<p>B+树相对B树的优点是：因为非叶子节点不包含数据，所以非叶子节点所占空间变小了，每个非叶子节点能存放更多关键字，从而树的高度也变小了，能加快查找。同时，所有叶子节点都在同一层，查找只有查到叶子节点层才返回，查找速度也比B树稳定。另外，底层的叶子节点链表十分有利于全节点的遍历操作，同时还是有序的，说明B+树天然支持排序。但是B树相对B+树也有优点，如果经常访问的关键字离根节点较近，那么显然是B树更快。</p>
<h2 id="lsm-tree">3.2 LSM-Tree</h2>
<p>LSM-Tree是一种多层结构，上小下大。LSM-Tree分成两个部分，一部分在内存，一部分在硬盘，C0层存在内存，磁盘中的部分分为C1,C2,…Ck等多层。内存中的结构是有序的，并且可以随时进行in-place update，支持随机读写。内存中的部分满了之后，与磁盘上的C1层合并，然后刷到C1，这其中会进行一个归并排序，让C1层上的数据也成为按key有序的，当C1满了之后再刷到C2，以此类推。这在LSM-Tree中被称为compaction。每一层的容量都比上层的要大。Compaction可以后台异步进行，不阻塞I/O。下图展示了LSM-Tree基本结构：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image006.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图3-3 LSM-Tree 基本结构示意图</p>
<p>在写入流程中可以看到，最新的数据在 C0 层，最老的数据在 Ck 层，所以查询也是先查 C0 层，如果没有要查的 key，再查 C1，逐层查。因为数据可能存在任意一层，所以最坏情况下要读所有的层，这也意味着LSM-Tree的读性能并没有那么好。所以它适合写多读少的情况。</p>
<p>为了加快查找速度，LSM-Tree中还采用了一种叫做Bloom Filter的数据结构，它实际上是一个bitmap。一个key被k个hash函数计算之后产生k个bit，当所有的bit都为1时key存在，如果有1个bit不为1则key不存在。这样利用Bloom Filter可以加快查找速度，在每一层设置一个Bloom Filter，key在存储的时候先存Bloom filter，查找时先访问Bloom Filter，如果Bloom Filter返回false那么一定不存在。但是Bloom Filter也存在假阳性率，即，如果Bloom Filter返回false，那么确实一定不存在，但是Bloom Filter返回true，仍然有可能不存在。</p>
<h2 id="lsm-tree-vs.-b树">3.3 LSM-Tree vs. B+树</h2>
<p>LSM树和B+树的差异主要在于读性能和写性能进行权衡。</p>
<p>当写读比例很大的时候（写比读多），LSM树相比于B树有更好的性能。随着insert操作，为了维护B+树结构，节点分裂。读磁盘的随机读写概率会变大，性能会逐渐减弱。而LSM-Tree的写都是顺序写，而硬盘的顺序写性能远高于随机写。</p>
<p>另外，由于LSM-Tree在硬盘上的每一层都是连续的存储区域，它对存储空间的利用率也是比B+Tree要好很多的。研究显示[4]，B+树中叶子节点的页平均只有2/3是满的。</p>
<p>但是相应地，LSM-Tree的读性能比B+Tree要差。在B+Tree中，数据的查找十分接近二分查找。但是在LSM-Tree中，由于数据可能存在任何一层，所以最坏情况下查找一个数据要遍历所有层所有文件。</p>
<p>所以，两种数据结构适用于不同的场景，LSM-Tree适合写多读少，B+Tree适合读多写少。传统的MySQL数据库一般采用B+Tree作为存储结构，而近年来的NoSQL数据库一般采用LSM-Tree。</p>
<h1 id="lsm-tree在数据库中的应用">4 LSM-Tree在数据库中的应用</h1>
<p>LSM Tree在数据库中有着广泛的应用，LevelDB[5]、RocksDB[6]、Scylladb[7]、Cassandra[8]等数据库都采用了LSM Tree作为底层的基本存储结构。下面主要介绍LSM Tree在一些主流数据库中的应用。</p>
<h2 id="leveldb">4.1 LevelDB</h2>
<p>LevelDB是Google研究员Jeffrey Dean和Sanjay Ghemawat编写的开源磁盘键值存储。受Bigtable的启发，LevelDB在New BSD许可下托管在GitHub上，并已移植到各种基于Unix的系统以及macOS，Windows和Android。</p>
<p>LevelDB 结构包括六个主要部分，内存中的MemTable和Immutable MemTable，磁盘上的主要文件包括Current文件，Manifest文件，log文件以及SSTable文件。下图是LevelDB的基本结构：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image007.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图4-1 LevelDB 架构图</p>
<p>当要写数据时，首先将写入操作加到写前日志(Write-Ahead Log，简称WAL)中，接下来把数据写到 MemTable中，当 MemTable 满了，就将这个 MemTable 切换为不可更改的 Immutable MemTable，并新开一个 MemTable 接收新的写入请求。而这个 Immutable MemTable 就可以刷磁盘了。这里刷磁盘是直接刷成 L0 层的 SSTable 文件，并不直接跟 L0 层的文件合并。当L0层满了以后，数据再刷到L1层，这里会与L1层的数据进行合并，具体是一个归并排序，去掉重复的数据并保证数据在L1层上有序。当L1层满了以后再刷到L2层…以此类推。也就是说，除了L0层可能有key重叠，并且无序，其余每一层都是key不重叠且有序的。每一层的大小都比上一层大，LevelDB中将下一层的大小设置成上一层的10倍。数据在磁盘上都是以SSTable文件的形式存放。</p>
<p>Manifest记载了SSTable各个文件的管理信息，包括文件所属Level，文件名，最小的Key和最大的Key，主要用于加快查找。Current文件的内容只记载当前的manifest文件名，因为在Compaction的过程中可能产生新版本的Manifest，这时老版本的Manifest就没有用了。Log文件在系统中的作用主要是用于系统崩溃恢复而不丢失数据。</p>
<p>数据查找的时候先查MemTable，再查Immutable MemTable，再从L0开始一层层往下查，找到了就立刻返回。Manifest文件和Bloom Filter可以帮助加速查找。</p>
<h2 id="rocksdb">4.2 RocksDB</h2>
<p>结构和LevelDB大同小异，只是多了一些改进[15]：</p>
<p>\1. 增加了column family，有了列簇的概念，可把一些相关的key存储在一起</p>
<p>\2. 内存中有多个Immutable MemTable，可防止LevelDB中的 write stall</p>
<p>\3. 可支持多线程同时Compaction，理论上多线程同时Compaction会比一个线程Compaction要快</p>
<p>\4. 支持TTL</p>
<p>\5. flush与Compaction分开不同的线程池来调度，并具有不同的优先级，flush要优于Compaction，这样可以加快flush，防止stall</p>
<p>\6. 对SSD存储做了优化，可以以in-memory方式运行</p>
<p>\7. 增加了对 Write Ahead Log（WAL）的管理机制，更方便管理WAL</p>
<p>\8. 支持多种不同的compaction策略</p>
<p>下图是RocksDB的结构示意图：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image009.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图4-2 RocksDB结构示意图</p>
<h1 id="lsm-tree存在的挑战与优化">5 LSM-Tree存在的挑战与优化</h1>
<h2 id="挑战">5.1 挑战</h2>
<p>LSM-Tree中存在的问题主要可分为三类：</p>
<p>\1. 写放大。以LevelDB为例，由于每一层是上一层大小的 10 倍，所以在最坏情况下，上一层的一个文件可能需要和下一层的十个文件进行合并，这样本来只需要进行一次写入操作，在实际写入时却写了10次，所以合并的写放大是 10。假设每行数据经过一系列 compaction 最终都会落入最终层，每层都需要重新写一次，那么从 L1 到 L6 的写放大为 5，加上 WAL 和 L0，最终写放大可能会超过 50。在机械硬盘上由于顺序写的速度远远高于随机写，所以这种写放大带来的开销可以忽略。但是如果是在SSD或者NVM这些顺序写和随机写差别不大的材料上，这种写放大就会带来很大开销。</p>
<p>\2. 读放大。同样以LevelDB为例，为了查询一个 1KB 的数据。最坏需要读 L0 层的 8 个文件，再读 L1 到 L6 的每一个文件，一共 14 个文件。而每一个SSTable文件内部需要读 16KB 的索引，4KB的布隆过滤器，4KB的数据块。一共 24*14/1=336倍。key-value 越小读放大越大。LSM-Tree的读放大比写放大更为严重。</p>
<p>\3. 空间放大。假设需要存储10MB数据，但实际硬盘占用了30MB，那么空间放大就是3。有比较多的因素会影响空间放大，比如在Compaction过程中需要临时存储空间，空间碎片，Block中有效数据的比例小，旧版本数据未及时删除等等。</p>
<p>下图展示了LSM-Tree在两种数据集大小情况下的读写放大情况。针对这些问题，近年来也有很多文章提出了优化算法。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image011.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑1 LSM-Tree在不同数据集下的读写方法情况</p>
<h2 id="优化方法">5.2 优化方法</h2>
<h3 id="wisckey">5.2.1 WiscKey</h3>
<p>Lanyue Lu等人提出WiscKey[10]用于设计SSD上的LSM-Tree，旨在充分利用SSD的并行性并减少写放大与读放大。WiscKey 的核心思想是将数据中的 Key 和 Value 分离，只在 LSM-Tree 中有序存储 Key，而将 Value 存放在单独的 Log 中。这样带来了两点好处：</p>
<p>\1. 当 LSM-Tree 进行 compaction 时，只会对 Key 进行排序和重写，不会影响到没有改变的 Value，也就显著降低了写放大</p>
<p>\2. 将 Value 分离后，LSM-Tree 本身会大幅减小，所以对应磁盘中的层级会更少，可以减少查询时从磁盘读取的次数，并且可以更好的利用缓存的效果</p>
<p>具体实现上，在 LSM-Tree 的基础上，WiscKey 引入了一个额外的存储用于存储分离出的值，称为 Value Log。整体的读写路径为：</p>
<p>l 当用户添加一个 KV 时，WiscKey 会先将 Value 写入到 Value-Log 中（顺序写），然后将 Key 和 Value 在 Value Log 中的地址写入 LSM-Tree</p>
<p>l 当用户删除一个 Key 时，仅在 LSM-Tree 中删除 Key 的记录，之后通过 GC 清理掉 Value Log 中的数据</p>
<p>l 当用户查询一个 Key 时，会先从 LSM-Tree 中查询到 Value 的地址，再根据地址将 Value 真正从 Value-Log 中读取出来（随机读）</p>
<p>假设 Key 的大小为 16 Bytes，Value 的大小为 1KB，优化后的效果为：</p>
<p>l 如果在 LSM-Tree 中的单层的写放大率是 10，那么使用 WiscKey 后单层的写放大率将变为 ((16 x 10) + (1024 x 1)) / (16 + 1024) = 1.14，远小于之前的 10 倍</p>
<p>l 如果一个标准的 LSM-Tree 的大小为 100G，那么将 Value 分离后 LSM-Tree 本身的大小将会减少到 2G，层级会减少 1~2 级，并且缓存到内存中的比例会更高，从而降低读放大</p>
<p>当然，这样做也带来了一些问题，主要有：</p>
<p>l 在标准的 LSM-Tree 中，由于 Key 和 Value 是按照顺序存储在一起的，所以范围查询只需要顺序读即可遍历整个 SSTable 的所有数据。但是在 WiscKey 中，每个 Key 都需要额外的一次随机读才能读取到对应的 Value，因此效率会很差。</p>
<p>对此，WiscKey 内部维护一个 32 线程的线程池，当用户使用迭代器迭代一行时，迭代器会预先取出多个 Key，并放入到一个队列中，线程池会从队列中读取 Key 并行的查找对应的 Value。图中展示了顺序读、随机读、随机32路读的性能差异：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image013.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑2 WiscKey的读写差异</p>
<p>可以看到，在请求大小达到64k以后，随机32路读的性能和顺序读的性能已经差不多了。</p>
<p>l 当用户删除一个 Key 时，WiscKey 只会将 LSM-Tree 中的 Key 删除掉，所以需要一个额外的方式清理 Value-Log 中的值。</p>
<p>WiscKey的解决方法是：维护一个 Value Log 的有效区间（由 head 和 tail 两个地址组成），通过不断地搬运有效数据来达到淘汰无效数据。如图所示。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image015.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑3 WiscKey淘汰过程</p>
<p>整个流程为：</p>
<p>\1. 对于 Value-Log 中的每个值，需要额外存储 Key，为了方便从 LSM-Tree 中进行反查（相对 Value，Key 会比较小，所以写入放大不会增加太多）</p>
<p>\2. 从 tail 的位置读取 KV，通过 Key 在 LSM-Tree 中查询 Value 是否还在被引用</p>
<p>\3. 如果 Value 还在被引用，则将 Value 写入到 head，并将新的 Value 地址写回 LSM-Tree 中</p>
<p>\4. 如果 Value 已经没有被引用，则跳过这行数据，接着读取下一个 KV</p>
<p>\5. 当已经确认数据写入 head 之后，就可以将 tail 之后的数据都删除掉了</p>
<p>将key与value分离，如何保证一致性也是一个很难的问题。WiscKey 通过查询时的容错机制保证 Key 和 Value 的原子性：当用户查询时，如果在 LSM-Tree 中找不到 Key，则返回 Key 不存在；如果在 LSM-Tree 中可以找到 Key，但是通过地址在 Value-Log 中无法找到匹配的 Value，则说明 Value 在写入时丢失了，同样返回不存在。</p>
<p>此外，WiscKey还对这个与key分开的Value Log做了一些其他的优化：</p>
<p>为了提高写入效率，WiscKey 首先会将 Value 写入到 Write Buffer 中，等待 Write Buffer 达到一定大小再一起刷新到文件中。所以查询时首先也要先从 Write Buffer 中查询。当崩溃时，Write Buffer 中的数据会丢失。</p>
<p>在 WiscKey 中，Value-Log 和 WAL 都是基于用户的写入顺序进行存储的，并且也具备了恢复数据的所有内容，所以理论上 Value-Log 是可以同时作为 WAL 的，从而减少 WAL 的写放大。由于 Value Log 的 GC 比 WAL 更加低频，并且包含了大量已经持久化的数据，直接通过 Value-Log 进行恢复的话可能会导致回放大量已经持久化到 SST 的数据。所以 WiscKey 会定期将已经持久化到 SST 的 head 写入到 LSM-Tree 中，这样当恢复时只需要从最新持久化的 head 开始恢复即可。</p>
<h3 id="accordion">5.2.2 Accordion</h3>
<p>Edward Bortnikov等人提出了Accordion[11]，通过将LSM设计原理重新应用于内存管理，来解决LSM-Tree中频繁的compaction操作带来的开销（写放大）以及动态内存存储的碎片化内存布局问题。</p>
<p>Accordion利用了静态段是不可变的事实，并把它们的索引布局优化成水平的。该算法还执行内存中压缩，从而在将冗余数据写入磁盘之前消除了冗余数据。下图是Accordion的结构：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image017.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑4 Accordion结构图</p>
<p>Accordion将数据作为按照事件排序的段的管道来管理，每个段包含一组数据单元格上的索引。时间上最近的段被称为active的，它们是可变的并吸收写操作，其余的段是不可变的。读操作可以就像搜索传统的LSM在磁盘上的多个文件一样遍历内存中的所有段，并且可以并发地搜索多个段。</p>
<p>数据先写到active段，当active段达到一定大小时触发内存中的刷新，数据刷到水平段上，这个刷新过程会将动态段的索引以一个紧凑的有序数组代替。水平段段索引因为更加紧凑从而延迟了刷新到disk的过程，也就减少了disk中的compaction操作。当水平段的数量达到上限后触发内存中的合并，以一个段去代替多个段，这个段的索引覆盖了所有原始段的索引数据。接下来是一个可选的内存中compaction，通过创建一个没有冗余的水平索引并部署冗余数据单元（如果内存存储会在内部管理数据单元存储，就将留下的单元重定向到新的数据块，否则，就简单地取消引用冗余数据）进一步消除冗余。最后刷新到磁盘的过程和标准的LSM-Tree的一样。这四个过程中的索引结构如下图所示：</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image019.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑5 四个过程的索引结构</p>
<p>Accordion使用一种自适应的策略去决定是否执行上述内存中compaction。它根据数据中的冗余程度和感知的成本效益来选择是否消除冗余数据或不消除，自适应在单个LSM存储的级别上起作用。这个自适应策略主要由两个参数决定：限流参数t，随着数据量的增大而变大；唯一性参数u，根据段索引的先前合并期间遇到的唯一键的比例，估计内存存储中唯一键的比率。Accordion还会进行WAL截断来解决由于内存中的压缩会延迟磁盘刷新导致的HLog文件（WAL）变长的问题。</p>
<p>水平段管道是由一个双端队列实现的，管道的读取器和写入器通过轻量级的写时复制进行协调，并通过维护版本号的方式来维持一致性。</p>
<h3 id="lazy-leveling和fluid-lsm-tree">5.2.3 Lazy Leveling和Fluid LSM-Tree</h3>
<p>Niv Dayan[12]等人指出，现有的LSM技术并没有很好地在update的I/O开销和查询的I/O开销以及存储空间之间达到平衡。他们提出了“Lazy Leveling”，在除了最大层之外的所有层之中移除了合并操作，Lazy Leveling在维持了一样的点查性能、范围查询性能、存储空间的情况下提升了最坏情况下的update开销的复杂度。而后又进一步提出了Fluid LSM-Tree，相比Lazy Leveling，它可以在最大层上有更少的合并，于是可以更加优化update，同时，它在所有其他层上有更多合并，从而能更加优化小范围的查询。</p>
<p>建立Lazy leveling的动机是在小的层上的归并会显著提升更新的开销，但是对点查询、范围查询以及空间放大只有微小的提升。下图展示了Lazy Leveling的结构和性能特点。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image021.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑6 Lazy Leveling的结构和各种开销复杂度</p>
<p>图中最顶层展示了Lazy Leveling的结构并和tiering、leveling进行了比较。Lazy Leveling的核心是tiering与leveling的混合：在最大层上应用leveling，在其他层上应用tiering。因此在最大层上的运行次数是1，所有其他层上的运行次数最多T-1，也就是第T个请求到来时才触发合并。</p>
<p>下面每一层是Lazy Leveling在各个方面的开销与其他两种策略的比较，其中zero-result point lookup cost代表的是在最坏情况下查询多余的I/O开销。可以看到，Lazy Leveling在空间放大、点查开销以及大范围的查询开销上和leveling表现一样，但是降低了update开销的复杂度，同时只提供了一个稍微差一点的小范围性能。</p>
<p>下图比较了不同合并策略在层大小比例T从2变化到上限Tlim的行为差异。A部分表示更新开销与点查开销随T值的变化，B和C部分表示更新开销分别与小范围查询和大范围查询开销随T值的变化。显然，每个策略的图线在T=2时都相交，因为此时它们的行为都是一样的：每一层都在第二次运行到来时发生合并。图中A部分显示，相比于leveling，Lazy Leveling对于update开销的上升能换来更好的点查开销下降，这两条曲线在T=Tlim时相交，此时它们都退化成了有序数组。B部分显示，lazy leveling对于小范围查询的开销增大是可以接受的，C部分进一步显示，这个差异在随着范围变大变的更加微不足道。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image023.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑7 各种合并策略在不同T情况下的行为差异</p>
<p>Fluid LSM-Tree是对这些LSM-Tree的综合，通过对最大层和所有其他层分别控制合并操作的频率的方式，实现了上述这些不同合并策略之间的切换与结合使用。下图显示了Fluid LSM-Tree的基本结构。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image025.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑8 Fluid LSM-Tree的结构和各种开销复杂度</p>
<p>在最大层最多有Z次运行，在其他较小的层最多有K次。每一层有一个活跃的运行，将来自上一层的所有运行合并到这个运行中。每一个活跃运行有一个大小上限，基于它所在的层数。当一个活跃运行达到上限后，我们在那一层启动一个新的活跃运行。最后当一层达到容量后，所有的运行都合并然后刷到下一层。</p>
<p>K和Z是调节参数，K和Z在不同情况下，Fluid LSM-Tree就是不同的合并策略：</p>
<p>l K=1,Z=1就是leveling</p>
<p>l K=T-1,Z=T-1就是tiering</p>
<p>l K=T-1,Z=1就是lazy leveling</p>
<p>在Fluid LSM-Tree中，各个指标的开销如图中B-G层所示。</p>
<p>下图是加入Fluid LSM-Tree之后的图。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image027.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑9 更新开销</p>
<p>圆圈表示三种合并策略的相交点也就是T等于2时，方块表示T=10，这是大部分主流的KV存储中LSM-Tree的T值。虚线表示两条过渡曲线，表示Fluid LSM-Tree是如何平滑地从一种策略过渡到另一种策略的。其中trans1表示从lazy leveling过渡到tiering，trans2表示从lazy leveling过渡到leveling。注意到A中lazy leveling有一个拐点，在拐点之上随着T的增大update开销变小，于是，Niv Dayan他们将过渡曲线trans1的T值固定为拐点的T值，将Z值从1变化到T-1，这样得到的曲线可以获得更好的update与点查开销权衡。</p>
<p>为了能在范围查询上表现的更好，于是设计了trans2。这是一条固定K，变化T的曲线，图中K被固定为拐点的T-1。A部分显示trans2的点查与update开销权衡和lazy leveling接近，B和C则显示trans2的范围查询与update开销权衡和leveling几乎一样。可见，trans2对于小范围的查询开销优化有很好的控制。</p>
<p>通过这样的图线，可以对于一个特定的应用场景需求，找到一种最合适的参数配置，使得有最低的开销。</p>
<h3 id="skip-tree">5.2.4 Skip-Tree</h3>
<p>Yinliang Yue[13]等人提出了Skip-Tree来解决LSM-Tree中的写放大问题，Skip-Tree的核心思想是在数据从LSM-Tree的上层刷到下层时，选择性地跳过某些层。</p>
<p>这种控制KV数据跳过某些层的机制如下：首先使用Bloom Filter确定对于一个特定的key，是否有一个value版本存在于一个数据块中。他们对于每个数据块都维护了一个Bloom Filter，每个KV数据项的key在被存储到块之前都需要被加入到Bloom Filter中。能够跳过多层的数据，必须满足值版本限制，即如果一个第Ci层的数据想要被直接刷到Ci+k层，那么必须确保CI+1,…,CI+k-1层都没有这个key值。由于Bloom Filter存在假阳性率（即，Bloom Filter判定不存在的一定不存在，但是Bloom Filter判定存在的也可能不存在），可能存在误判，于是，他们保守性地估计在Bloom Filter判定存在的时候，在CI+2层中的数据块中至少含有一个SSTable含有一样的key。</p>
<p>经过测试，他们发现一次只跳过一层虽然可以最小化get与put延迟的增长，但是写放大的减少会受到限制。相反，一次跳过多个层，能显著减少写放大，但是同时也导致了很高的get与put延迟。为此他们对每个设计了最大跳过层数。最后他们经过测试发现这个数字设置为2时能够系统能达到最好性能。</p>
<p>下图描述了Skip-Tree的结构。</p>
<figure>
<img data-src="file:////Users/taowei/Library/Group%20Containers/UBF8T346G9.Office/TemporaryItems/msohtmlclip/clip_image029.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption>
</figure>
<p>图 4‑10 Skip-Tree结构图</p>
<p>虽然一个数据要想跳跃性地从Ci层直接刷到Ci+2或者更底层，最直接的想法就是直接把这个KV数据项直接和目标SSTable合并，但是这样会带来大量额外的Disk I/O，导致严重的写放大。</p>
<p>于是他们提出了基于buffer的延迟合并以及排序机制。对于每个磁盘上的层Ci，他们在内存中准备了一个buffer Bi，用于缓存将要跳跃地刷到这一层的数据。这样就将这些跳跃下来的数据的合并与排序推迟到磁盘compaction的时候再进行。这些内存中的buffer不同于磁盘上的层的SSTable存储形式，它们只是以一个简单的按key排序的链表的形式组织。Skip-Tree使用WAL(提前写日志)的方式来保证易失性buffer里面数据的可靠性，为了减小logging开销，它们只使用log记录键以及原始SSTable的ID，并在buffer里面还有对SSTable的引用时阻止删除这个SSTable。</p>
<h1 id="总结">6 总结</h1>
<p>在这篇文章中，我们主要介绍了LSM-Tree这种数据结构出现的背景，将其与传统关系型数据库存储结构B+Tree进行比较，分析了二者各自的基本结构与优缺点。然后我们介绍了LSM-Tree在当今主流NoSQL数据库中的具体应用，最后我们列举了一些对LSM-Tree的改进工作。</p>
<p>同时，我们认为LSM-Tree也可以和现在新兴的非易失性存储（Non-Volatile Memory, NVM）相结合，因为NVM是一种优秀的存储介质，具有可持久化、可按字节寻址、访问速度远高于磁盘等特点。利用NVM，可以很好地解决LSM-Tree中读速度较慢的问题。</p>
<h1 id="参考文献">参考文献</h1>
<p>[1] Severance, D.G., Lohman, G.M.: Differential files: Their appli-cation to the maintenance of large databases. ACM TODS 1(3), 256–267 (1976)</p>
<p>[2] Stonebraker, M.: The design of the Postgres storage system. In: VLDB, pp. 289–300 (1987)</p>
<p>[3] O’Neil, P., et al.: The log-structured merge-tree (LSM-tree). Acta Inf.33(4), 351–385 (1996)</p>
<p>[4] Yao, A.C.C.: On random 2–3 trees. Acta Informatica 9(2), 159– 170 (1978)</p>
<p>[5] LevelDB. https://github.com/google/leveldb.</p>
<p>[6] RocksDB. http://rocksdb.org/.</p>
<p>[7] Scylla. https://github.com/scylladb/scylla.</p>
<p>[8] Cassandra. http://cassandra.apache.org.</p>
<p>[9] Chang, F., Dean, J., Ghemawat, S., Hsieh, W. C., Wallach, D. A., Burrows, M., ... &amp; Gruber, R. E. (2008). Bigtable: A distributed storage system for structured data. ACM Transactions on Computer Systems (TOCS), 26(2), 1-26.</p>
<p>[10] Lu L, Pillai T S, Gopalakrishnan H, et al. Wisckey: Separating keys from values in ssd-conscious storage[J]. ACM Transactions on Storage (TOS), 2017, 13(1): 1-28.</p>
<p>[11] Bortnikov, E., et al.: Accordion: Better memory organization for LSM key-value stores. PVLDB11(12), 1863–1875 (2018)</p>
<p>[12] Dayan, N., Idreos, S.: Dostoevsky: Better space-time trade-offs for LSM-tree based key-value stores via adaptive removal of superflu-ous merging. In: ACM SIGMOD, pp. 505–520 (2018)</p>
<p>[13] Yue, Y., et al.: Building an efficient put-intensive key-value store with skip-tree. IEEE Transactions on Parallel and Distributed Sys-tems (TPDS)28(4), 961–973 (2017)</p>
<p>[14] Luo, C., &amp; Carey, M. J. (2020). LSM-based storage techniques: a survey. The VLDB Journal, 29(1), 393-418.</p>
<p>[15] Dong, S., Callaghan, M., Galanis, L., Borthakur, D., Savor, T., &amp; Strum, M. (2017, January). Optimizing Space Amplification in RocksDB. In CIDR (Vol. 3, p. 3).</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>KV Store</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode746题解.md</title>
    <url>/2020/12/21/leetcode746%E9%A2%98%E8%A7%A3-md/</url>
    <content><![CDATA[<h2 id="原题">原题</h2>
<p>数组的每个索引作为一个阶梯，第 i个阶梯对应着一个非负数的体力花费值 cost<a href="索引从0开始">i</a>。</p>
<p>每当你爬上一个阶梯你都要花费对应的体力花费值，然后你可以选择继续爬一个阶梯或者爬两个阶梯。</p>
<p>您需要找到达到楼层顶部的最低花费。在开始时，你可以选择从索引为 0 或 1 的元素作为初始阶梯。</p>
<p>示例 1:</p>
<p>输入: cost = [10, 15, 20] 输出: 15 解释: 最低花费是从cost[1]开始，然后走两步即可到阶梯顶，一共花费15。 示例 2:</p>
<p>输入: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 输出: 6 解释: 最低花费方式是从cost[0]开始，逐个经过那些1，跳过cost[3]，一共花费6。 注意：</p>
<p>cost 的长度将会在 [2, 1000]。 每一个 cost[i] 将会是一个Integer类型，范围为 [0, 999]。</p>
<h2 id="题解">题解</h2>
<p>这是一道典型的动态规划题。可以这样考虑：因为到达第i级台阶，要么从第i-2级台阶跨两步上去，要么从第i-1级台阶跨一步上去。那么到达第i级台阶消耗的精力，应该只和到达第i-2级台阶和到达第i-1级台阶消耗的精力有关。可以维护一个数组，表示到达第i级台阶所需要的最少精力。可以得到动态规划方程：</p>
<p>dp[i] = min(dp[i-2]+cost[i-2], dp[i-1]+cost[i-1])</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minCostClimbingStairs(self, cost: List[int]) -&gt; int:</span><br><span class="line">        n &#x3D; len(cost)</span><br><span class="line">        sum &#x3D; [0] * (n+1)</span><br><span class="line">        sum[0] &#x3D; 0</span><br><span class="line">        sum[1] &#x3D; 0</span><br><span class="line">        for i in range(2, n+1):</span><br><span class="line">            sum[i] &#x3D; min(sum[i-1] + cost[i-1], sum[i-2] + cost[i-2])</span><br><span class="line">        return sum[n]</span><br></pre></td></tr></table></figure>
<p>另外，由于dp[i]只和dp[i-1]以及dp[i-2]有关，所以可以用三个变量来表示它们（官方题解叫滚动数组），这样可以把空间复杂度简化到O(1)。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def minCostClimbingStairs(self, cost: List[int]) -&gt; int:</span><br><span class="line">        n &#x3D; len(cost)</span><br><span class="line">        prev &#x3D; curr &#x3D; 0</span><br><span class="line">        for i in range(1, n):</span><br><span class="line">            nxt &#x3D; min(prev + cost[i-1], curr + cost[i])</span><br><span class="line">            prev, curr &#x3D; curr, nxt</span><br><span class="line">        return curr</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
</search>
